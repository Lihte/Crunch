<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WaveEngine.Components</name>
    </assembly>
    <members>
        <member name="T:WaveEngine.Components.Animation.Animation3D">
            <summary>
                Behavior to controls the animations of a 3D model.
            </summary>
            <remarks>
                Ideally this class should be used to hold all the animations related to a given 3D model.
            </remarks>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.instances">
            <summary>
                Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.animationPath">
            <summary>
            The animation path.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.keyFrameEvents">
            <summary>
            The key frame events.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.currentAnimation">
            <summary>
            The current animation.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.frame">
            <summary>
            The frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.framesPerSecond">
            <summary>
            The frames per second.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.internalAnimation">
            <summary>
            The internal animation.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.internalFrame">
            <summary>
            The internal frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.lastFrame">
            <summary>
            The last frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.numFrames">
            <summary>
            The num frames.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.prevFrame">
            <summary>
            The prev frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.targetFrame">
            <summary>
            The target frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.timePerFrame">
            <summary>
            The time per frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation3D.totalAnimTime">
            <summary>
            The total anim time.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Animation3D"/> class.
            </summary>
            <param name="animationPath">
            The path to the animation data.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Animation3D"/> class.
            </summary>
            <param name="name">
            The name of this behavior.
            </param>
            <param name="animationPath">
            The path to the animation data.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.AddKeyFrameEvent(System.String,System.Int32)">
            <summary>
            Adds a key frame event to a given animation.
            </summary>
            <param name="animation">
            The animation name.
            </param>
            <param name="keyFrame">
            The key frame when the event will be raised.
            </param>
            <returns>
            This instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.AddKeyFrameEvent(System.String,System.Int32,System.String)">
            <summary>
            Adds a key frame event to a given animation.
            </summary>
            <param name="animation">
            The animation name.
            </param>
            <param name="keyFrame">
            The key frame when the event will be raised.
            </param>
            <param name="tag">
            The tag associated with the event.
            </param>
            <returns>
            This instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.ClearKeyFrameEvents(System.String)">
            <summary>
            Clears all the key frame events of a given animation.
            </summary>
            <param name="animation">
            The animation name.
            </param>
            <returns>
            This instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.GetDuration(System.String)">
            <summary>
            Gets the duration of an animation.
            </summary>
            <param name="animation">
            The animation name.
            </param>
            <returns>
            The duration of the animation
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.PlayAnimation(System.String)">
            <summary>
            Plays the animation.
            </summary>
            <param name="name">
            The name of the animation.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.PlayAnimation(System.String,System.Boolean)">
            <summary>
            Plays the animation.
            </summary>
            <param name="name">
            The name of the animation.
            </param>
            <param name="loop">
            if set to <c>true</c> loop the animation.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.PlayAnimation(System.String,System.Boolean,System.Boolean)">
            <summary>
            Plays the animation.
            </summary>
            <param name="name">
            The name of the animation.
            </param>
            <param name="loop">
            if set to <c>true</c> loop the animation.
            </param>
            <param name="backwards">
            if set to <c>true</c> play the animation backwards.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.PlayToFrame(System.String,System.Int32)">
            <summary>
            Plays the animation up to a given frame.
            </summary>
            <param name="name">
            The name of the animation.
            </param>
            <param name="destFrame">
            The last frame of the animation to play.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.PlayToFrame(System.String,System.Nullable{System.Int32},System.Int32)">
            <summary>
            Plays the animation up to a given frame.
            </summary>
            <param name="name">
            The name of the animation.
            </param>
            <param name="from">
            The frame where the animation starts playing.
            </param>
            <param name="destFrame">
            The last frame of the animation to play.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.RemoveKeyFrameEvent(System.String,System.Int32)">
            <summary>
            Removes a key frame event.
            </summary>
            <param name="animation">
            The animation name.
            </param>
            <param name="keyFrame">
            The key frame when the event was raised.
            </param>
            <returns>
            This instance.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.StopAnimation">
            <summary>
                Stops the animation.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.Initialize">
            <summary>
                Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.Update(System.TimeSpan)">
            <summary>
            Updates the animation.
            </summary>
            <param name="gameTime">
            The game time.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation3D.UpdateNumFrames">
            <summary>
            The update num frames.
            </summary>
        </member>
        <member name="E:WaveEngine.Components.Animation.Animation3D.OnKeyFrameEvent">
            <summary>
                Raised when a certain frame of an animation is played.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.Backwards">
            <summary>
            Gets a value indicating whether the current active animation is played backwards.
            </summary>
            <value>
              <c>true</c> if backwards; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.BoundingBoxRefreshed">
            <summary>
                Gets or sets a value indicating whether the bounding box was refreshed.
            </summary>
            <value>
                <c>true</c> if the bounding box was refreshed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.CurrentAnimation">
            <summary>
                Gets or sets the current active animation.
            </summary>
            <value>
                The current animation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.Frame">
            <summary>
                Gets the current frame of the animation.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.TotalAnimTime">
            <summary>
                Gets the current animation time.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.FramesPerSecond">
            <summary>
                Gets or sets speed of the animation.
            </summary>
            <value>
                The speed of the animation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.InternalAnimation">
            <summary>
                Gets the animation data.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.Loop">
            <summary>
                Gets a value indicating whether current active animation is looping.
            </summary>
            <value>
                <c>true</c> if the animation is looping; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation3D.State">
            <summary>
                Gets the state of the current active animation.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.Animation2D">
            <summary>
                Behavior to control the animations of a Sprite.
            </summary>
            <remarks>
                Ideally this class should be used to hold all the animations related to a given Sprite.
            </remarks>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.Transform2D">
            <summary>
                Transform of the <see cref="T:WaveEngine.Components.Graphics2D.Sprite"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.animations">
            <summary>
                The animations
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.currentAnimation">
            <summary>
                The current animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.state">
            <summary>
                The state
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.targetFrame">
            <summary>
                The target frame
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.loop">
            <summary>
            Whether to loop current animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.spriteSheetLoader">
            <summary>
            Sprite sheet loader.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Animation2D.frames">
            <summary>
            Internal frames calc for further dispatching on Add() calls.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Animation2D"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.#ctor(System.String,WaveEngine.Components.Animation.ISpriteSheetLoader)">
            <summary>
                Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Animation2D"/> class.
            </summary>
            <param name="path">Content-relative path to sprite sheet data.</param>
            <param name="loader"><see cref="T:WaveEngine.Components.Animation.ISpriteSheetLoader"/> strategy</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.Add(System.String,WaveEngine.Components.Animation.StripAnimation)">
            <summary>
            Adds an animation to this behavior.
            </summary>
            <param name="animationName">
            Name of the animation to add.
            </param>
            <param name="animation">
            The animation to add.
            </param>
            <remarks>
            If there is already an animation with the same animation name, it will be overwritten.
            </remarks>
            <returns>
            The <see cref="T:WaveEngine.Components.Animation.Animation2D"/> it-self.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.Add(System.String,WaveEngine.Components.Animation.SpriteSheetAnimationSequence)">
            <summary>
            Adds a new animation specified within a sprite sheet document.
            </summary>
            <param name="name">Animation name.</param>
            <param name="sequence">Animation sequence.</param>
            <returns>The <see cref="T:WaveEngine.Components.Animation.Animation2D"/> it-self.</returns>
            <remarks>An <see cref="T:WaveEngine.Components.Animation.ISpriteSheetLoader"/> must be specified prior to this call.</remarks>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.Play">
            <summary>
            Plays the active animation just once.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.Play(System.Boolean)">
            <summary>
            Plays the active animation.
            </summary>
            <param name="loop">Whether to loop the animation once it ends.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.Play(System.Boolean,System.Boolean)">
            <summary>
            Plays the active animation.
            </summary>
            <param name="loop">Whether to loop the animation once it ends.</param>
            <param name="backwards">Whether the animation goes backwards.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.PlayToFrame(System.Int32)">
            <summary>
            Plays the active animation starting from a given frame.
            </summary>
            <param name="targetFrame">
            The target frame.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.Remove(System.String)">
            <summary>
            Removes an animation.
            </summary>
            <param name="animationName">
            Name of the animation to remove.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.SetFrame(System.Int32)">
            <summary>
            Sets the frame for the current active animation.
            </summary>
            <param name="frame">
            The frame index.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.Stop">
            <summary>
                Stops the current active animation.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.Create``1(System.String)">
            <summary>
            Creates a new instance of <see cref="T:WaveEngine.Components.Animation.Animation2D"/> based on the <see cref="T:WaveEngine.Components.Animation.ISpriteSheetLoader"/>.
            </summary>
            <typeparam name="T">Sprite sheet loader strategy.</typeparam>
            <param name="path">Content-relative path to sprite sheet data.</param>
            <returns>A new instance of <see cref="T:WaveEngine.Components.Animation.Animation2D"/>.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.Initialize">
            <summary>
                Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Animation2D.Update(System.TimeSpan)">
            <summary>
            Updates the animation.
            </summary>
            <param name="gameTime">
            The game time.
            </param>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation2D.CurrentRectangle">
            <summary>
            Gets the Rectangle of the current active animation.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation2D.AnimationNames">
            <summary>
                Gets the names of the different animations.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation2D.CurrentAnimation">
            <summary>
                Gets or sets the current active animation.
            </summary>
            <value>
                The current animation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Animation2D.State">
            <summary>
                Gets the state of the current active animation.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.ISpriteSheetLoader">
            <summary>
            Contract for every sprite sheet loader.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.ISpriteSheetLoader.Parse(System.String)">
            <summary>
            Builds the collection of frames by parsing passed document.
            </summary>
            <param name="path">Content-relative path to the sprite sheet document.</param>
            <returns>Array of <see cref="T:WaveEngine.Common.Math.Rectangle"/> containing each frame.</returns>
        </member>
        <member name="T:WaveEngine.Components.Animation.SkeletalAnimation">
            <summary>
            Behavior to control skeletal 2D animations
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.SkeletalAnimation.SkeletalData">
            <summary>
            The skeletal data
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.SkeletalAnimation.Skeleton">
            <summary>
            The skeleton
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.SkeletalAnimation.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.SkeletalAnimation.animationPath">
            <summary>
            The animation path
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.SkeletalAnimation.currentSkin">
            <summary>
            The current skin
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.SkeletalAnimation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.SkeletalAnimation"/> class.
            </summary>
            <param name="animationPath">The animation path.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.SkeletalAnimation.Play">
            <summary>
            Plays this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.SkeletalAnimation.Play(System.Single)">
            <summary>
            Plays this instance.
            </summary>
            <param name="mixDuration">Mix duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.SkeletalAnimation.Play(System.Boolean,System.Single)">
            <summary>
            Plays the specified loop.
            </summary>
            <param name="loop">if set to <c>true</c> [loop].</param>
            <param name="mixDuration">Mix duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.SkeletalAnimation.Play(System.Boolean)">
            <summary>
            Plays the specified loop.
            </summary>
            <param name="loop">if set to <c>true</c> [loop].</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.SkeletalAnimation.ContainsAnimation(System.String)">
            <summary>
            Search if the skeletal animation contains 
            </summary>
            <param name="animation">Animation name</param>
            <returns>Returns true if the skeletal animation contains the animation. False otherwise.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.SkeletalAnimation.Stop">
            <summary>
            Stops the current animation.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.SkeletalAnimation.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.SkeletalAnimation.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Animation.SkeletalAnimation.OnEndAnimation(System.Object,WaveEngine.Common.Helpers.StringEventArgs)">
            <summary>
            Event handler of the end animation event.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Animation name.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.SkeletalAnimation.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component" />, or the <see cref="T:WaveEngine.Framework.Entity" />
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="E:WaveEngine.Components.Animation.SkeletalAnimation.EndAnimation">
            <summary>
            Event raised when an animation has finalized.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.SkeletalAnimation.Speed">
            <summary>
            Gets or sets the speed.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.SkeletalAnimation.CurrentAnimation">
            <summary>
            Gets or sets the current animation.
            </summary>
            <value>
            The current animation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.SkeletalAnimation.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.SkeletalAnimation.Skin">
            <summary>
            Gets or sets the skin.
            </summary>
            <value>
            The skin.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.Animation">
            <summary>
            Animation class
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Animation.#ctor(System.String,System.Collections.Generic.List{WaveEngine.Components.Animation.Spine.ITimeline},System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.Animation"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="timelines">The timelines.</param>
            <param name="duration">The duration.</param>
            <exception cref="T:System.ArgumentNullException">name cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Animation.Apply(WaveEngine.Components.Animation.Spine.Skeleton,System.Single,System.Boolean)">
            <summary>
            Poses the skeleton at the specified time for this animation.
            </summary>
            <param name="skeleton">The skeleton.</param>
            <param name="time">The time.</param>
            <param name="loop">if set to <c>true</c> [loop].</param>
            <exception cref="T:System.ArgumentNullException">skeleton cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Animation.Mix(WaveEngine.Components.Animation.Spine.Skeleton,System.Single,System.Boolean,System.Single)">
            <summary>
            Poses the skeleton at the specified time for this animation mixed with the current pose.
            </summary>
            <param name="skeleton">The skeleton.</param>
            <param name="time">The time.</param>
            <param name="loop">if set to <c>true</c> [loop].</param>
            <param name="alpha">The amount of this animation that affects the current pose.</param>
            <exception cref="T:System.ArgumentNullException">skeleton cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Animation.BinarySearch(System.Single[],System.Single,System.Int32)">
            <summary>
            Binaries the search.
            </summary>
            <param name="values">The values.</param>
            <param name="target">After the first and before the last entry.</param>
            <param name="step">The step.</param>
            <returns>search result.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Animation.LinearSearch(System.Single[],System.Single,System.Int32)">
            <summary>
            Linears the search.
            </summary>
            <param name="values">The values.</param>
            <param name="target">The target.</param>
            <param name="step">The step.</param>
            <returns>Search result.</returns>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Animation.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Animation.Timelines">
            <summary>
            Gets or sets the timelines.
            </summary>
            <value>
            The timelines.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Animation.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
            <value>
            The duration.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.AnimationState">
            <summary>
            AnimationState class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AnimationState.previous">
            <summary>
            The previous
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AnimationState.previousTime">
            <summary>
            The previous time
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AnimationState.previousLoop">
            <summary>
            The previous loop
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AnimationState.mixTime">
            <summary>
            mix and mixDuration time
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AnimationState.mixDuration">
            <summary>
            mix and mixDuration time
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AnimationState.queue">
            <summary>
            The queue
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationState.#ctor(WaveEngine.Components.Animation.Spine.AnimationStateData)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.AnimationState"/> class.
            </summary>
            <param name="data">The data.</param>
            <exception cref="T:System.ArgumentNullException">data cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationState.Update(System.Single)">
            <summary>
            Updates the specified delta.
            </summary>
            <param name="delta">The delta.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationState.Apply(WaveEngine.Components.Animation.Spine.Skeleton)">
            <summary>
            Applies the specified skeleton.
            </summary>
            <param name="skeleton">The skeleton.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationState.AddAnimation(System.String,System.Boolean)">
            <summary>
            Adds the animation.
            </summary>
            <param name="animationName">Name of the animation.</param>
            <param name="loop">if set to <c>true</c> [loop].</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationState.AddAnimation(System.String,System.Boolean,System.Single)">
            <summary>
            Adds the animation.
            </summary>
            <param name="animationName">Name of the animation.</param>
            <param name="loop">if set to <c>true</c> [loop].</param>
            <param name="delay">The delay.</param>
            <exception cref="T:System.ArgumentException">Animation not found:  + animationName</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationState.AddAnimation(WaveEngine.Components.Animation.Spine.Animation,System.Boolean)">
            <summary>
            Adds the animation.
            </summary>
            <param name="animation">The animation.</param>
            <param name="loop">if set to <c>true</c> [loop].</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationState.AddAnimation(WaveEngine.Components.Animation.Spine.Animation,System.Boolean,System.Single)">
            <summary>
            Adds an animation to be played delay seconds after the current or last queued animation.
            </summary>
            <param name="animation">The animation.</param>
            <param name="loop">if set to <c>true</c> [loop].</param>
            <param name="delay">May be minor equal than 0 to use duration of previous animation minus any mix duration plus the negative delay.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationState.SetAnimation(System.String,System.Boolean,System.Single,WaveEngine.Components.Animation.Spine.Skeleton)">
            <summary>
            Sets the animation.
            </summary>
            <param name="animationName">Name of the animation.</param>
            <param name="loop">if set to <c>true</c> [loop].</param>
            <param name="mixDuration">Mix duration</param>
            <param name="skeleton">Animation skeleton</param>
            <exception cref="T:System.ArgumentException">Animation not found:  + animationName</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationState.SetAnimation(WaveEngine.Components.Animation.Spine.Animation,System.Boolean,System.Single,WaveEngine.Components.Animation.Spine.Skeleton)">
            <summary>
            Sets the animation.
            </summary>
            <param name="animation">The animation.</param>
            <param name="loop">if set to <c>true</c> [loop].</param>
            <param name="mixDuration">Mix duration</param>
            /// <param name="skeleton">Animation skeleton</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationState.ClearAnimation">
            <summary>
            Clears the animation.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationState.IsComplete">
            <summary>
            Determines whether this instance is complete.
            </summary>
            <returns>
              Returns true if no animation is set or if the current time is greater than the animation duration, regardless of looping.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationState.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationState.SetAnimationInternal(WaveEngine.Components.Animation.Spine.Animation,System.Boolean)">
            <summary>
            Sets the animation internal.
            </summary>
            <param name="animation">The animation.</param>
            <param name="loop">if set to <c>true</c> [loop].</param>
        </member>
        <member name="E:WaveEngine.Components.Animation.Spine.AnimationState.EndAnimation">
            <summary>
            Event raised when an animation has finalized.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.AnimationState.Data">
            <summary>
            Gets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.AnimationState.Animation">
            <summary>
            Gets the animation.
            </summary>
            <value>
            The animation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.AnimationState.Time">
            <summary>
            Gets or sets the time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.AnimationState.Loop">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WaveEngine.Components.Animation.Spine.AnimationState"/> is loop.
            </summary>
            <value>
              <c>true</c> if loop; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.AnimationStateData">
            <summary>
            AnimationStateData class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AnimationStateData.animationToMixTime">
            <summary>
            The animation to mix time
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationStateData.#ctor(WaveEngine.Components.Animation.Spine.SkeletonData)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.AnimationStateData"/> class.
            </summary>
            <param name="skeletonData">The skeleton data.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationStateData.SetMix(System.String,System.String,System.Single)">
            <summary>
            Sets the mix.
            </summary>
            <param name="fromName">From name.</param>
            <param name="toName">To name.</param>
            <param name="duration">The duration.</param>
            <exception cref="T:System.ArgumentException">Animation not found:  + fromName</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationStateData.SetMix(WaveEngine.Components.Animation.Spine.Animation,WaveEngine.Components.Animation.Spine.Animation,System.Single)">
            <summary>
            Sets the mix.
            </summary>
            <param name="from">Animation from.</param>
            <param name="to">Animation To.</param>
            <param name="duration">The duration.</param>
            <exception cref="T:System.ArgumentNullException">from cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AnimationStateData.GetMix(WaveEngine.Components.Animation.Spine.Animation,WaveEngine.Components.Animation.Spine.Animation)">
            <summary>
            Gets the mix.
            </summary>
            <param name="from">Animation From.</param>
            <param name="to">Animation To.</param>
            <returns>return mix result.</returns>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.AnimationStateData.SkeletonData">
            <summary>
            Gets the skeleton data.
            </summary>
            <value>
            The skeleton data.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.Atlas">
            <summary>
            Atlas class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Atlas.Pages">
            <summary>
            The pages
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Atlas.regions">
            <summary>
            The regions
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Atlas.textureLoader">
            <summary>
            The texture loader
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Atlas.#ctor(System.String,WaveEngine.Components.Animation.Spine.ITextureLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.Atlas"/> class.
            </summary>
            <param name="path">The path.</param>
            <param name="textureLoader">The texture loader.</param>
            <exception cref="T:System.Exception">Error reading atlas file:  + path</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Atlas.#ctor(System.IO.TextReader,System.String,WaveEngine.Components.Animation.Spine.ITextureLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.Atlas"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="dir">The dir.</param>
            <param name="textureLoader">The texture loader.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Atlas.FindRegion(System.String)">
            <summary>
            Returns the first region found with the specified name. This method uses string comparison to find the region, so the result 
            should be cached rather than calling this method multiple times.
            </summary>
            <param name="name">The name.</param>
            <returns>The region, or null.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Atlas.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Atlas.Load(System.IO.TextReader,System.String,WaveEngine.Components.Animation.Spine.ITextureLoader)">
            <summary>
            Loads the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="imagesDir">The images dir.</param>
            <param name="textureLoader">The texture loader.</param>
            <exception cref="T:System.ArgumentNullException">textureLoader cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Atlas.ReadValue(System.IO.TextReader)">
            <summary>
            Reads the value.
            </summary>
            <param name="reader">The reader.</param>
            <returns>Return a string value.</returns>
            <exception cref="T:System.Exception">Invalid line:  + line</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Atlas.ReadTuple(System.IO.TextReader,System.String[])">
            <summary>
            Returns the number of tuple values read (2 or 4).
            </summary>
            <param name="reader">The reader.</param>
            <param name="tuple">The tuple.</param>
            <returns>Return value.</returns>
            <exception cref="T:System.Exception">Invalid line:  + line</exception>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.AtlasPage">
            <summary>
            AtlasPage class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasPage.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasPage.Format">
            <summary>
            The format
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasPage.MinFilter">
            <summary>
            The min filter
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasPage.MagFilter">
            <summary>
            The mag filter
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasPage.UWrap">
            <summary>
            The u wrap
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasPage.VWrap">
            <summary>
            The v wrap
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasPage.Texture">
            <summary>
            The texture
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasPage.Width">
            <summary>
            The width
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasPage.Height">
            <summary>
            The height
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.AtlasRegion">
            <summary>
            AtlasRegion class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.Page">
            <summary>
            The page
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.X">
            <summary>
            The rectangle
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.Y">
            <summary>
            The y.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.Width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.Height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.U">
            <summary>
            The texcoord
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.V">
            <summary>
            The v.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.U2">
            <summary>
            The u2.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.V2">
            <summary>
            The v2.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.OffsetX">
            <summary>
            The offset x.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.OffsetY">
            <summary>
            The offset y.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.OriginalWidth">
            <summary>
            The original width
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.OriginalHeight">
            <summary>
            The original height.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.Index">
            <summary>
            The index
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.Rotate">
            <summary>
            The rotate
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.Splits">
            <summary>
            The splits
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasRegion.Pads">
            <summary>
            The pads
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.AtlasAttachmentLoader">
            <summary>
            AtlasAttachementLoader class
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.IAttachmentLoader">
            <summary>
            AttachmentLoader interface
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.IAttachmentLoader.NewAttachment(WaveEngine.Components.Animation.Spine.Skin,WaveEngine.Components.Animation.Spine.AttachmentType,System.String)">
            <summary>
            News the attachment.
            </summary>
            <param name="skin">The skin.</param>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
            <returns> May be null to not load any attachment.</returns>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AtlasAttachmentLoader.atlas">
            <summary>
            The atlas
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AtlasAttachmentLoader.#ctor(WaveEngine.Components.Animation.Spine.Atlas)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.AtlasAttachmentLoader"/> class.
            </summary>
            <param name="atlas">The atlas.</param>
            <exception cref="T:System.ArgumentNullException">atlas cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AtlasAttachmentLoader.NewAttachment(WaveEngine.Components.Animation.Spine.Skin,WaveEngine.Components.Animation.Spine.AttachmentType,System.String)">
            <summary>
            New Attachment.
            </summary>
            <param name="skin">The skin.</param>
            <param name="type">The attachmentType.</param>
            <param name="name">The name.</param>
            <returns>May be null to not load any attachment.</returns>
            <exception cref="T:System.Exception">Region not found in atlas:  + name +  ( + type + )</exception>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.Attachment">
            <summary>
            Attachment class
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Attachment.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.Attachment"/> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">name cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Attachment.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Attachment.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.AttachmentTimeline">
            <summary>
            AttachmentTimeLine class
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.ITimeline">
            <summary>
            Timeline interface
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.ITimeline.Apply(WaveEngine.Components.Animation.Spine.Skeleton,System.Single,System.Single)">
            <summary>
            Sets the value(s) for the specified time.
            </summary>
            <param name="skeleton">The skeleton.</param>
            <param name="time">The time.</param>
            <param name="alpha">The alpha.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AttachmentTimeline.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.AttachmentTimeline"/> class.
            </summary>
            <param name="frameCount">The frame count.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AttachmentTimeline.SetFrame(System.Int32,System.Single,System.String)">
            <summary>
            Sets the time and value of the specified keyframe. 
            </summary>
            <param name="frameIndex">Index of the frame.</param>
            <param name="time">The time.</param>
            <param name="attachmentName">Name of the attachment.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.AttachmentTimeline.Apply(WaveEngine.Components.Animation.Spine.Skeleton,System.Single,System.Single)">
            <summary>
            Sets the value(s) for the specified time.
            </summary>
            <param name="skeleton">The skeleton.</param>
            <param name="time">The time.</param>
            <param name="alpha">The alpha.</param>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.AttachmentTimeline.SlotIndex">
            <summary>
            Gets or sets the index of the slot.
            </summary>
            <value>
            The index of the slot.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.AttachmentTimeline.Frames">
            <summary>
            Gets the frames.
            </summary>
            <value>
            The frames.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.AttachmentTimeline.AttachmentNames">
            <summary>
            Gets the attachment names.
            </summary>
            <value>
            The attachment names.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.AttachmentTimeline.FrameCount">
            <summary>
            Gets the frame count.
            </summary>
            <value>
            The frame count.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.AttachmentType">
            <summary>
            AttachmentType enum.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AttachmentType.region">
            <summary>
            The region
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.AttachmentType.regionSequence">
            <summary>
            The region sequence
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.ColorTimeline">
            <summary>
            ColorTimeLine class
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.CurveTimeline">
            <summary>
            Base class for frames that use an interpolation bezier curve.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.CurveTimeline.linear">
            <summary>
            The LINEAR
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.CurveTimeline.stepped">
            <summary>
            The STEPPED
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.CurveTimeline.bezierSegments">
            <summary>
            The BEZIE r_ SEGMENTS
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.CurveTimeline.curves">
            <summary>
            The curves
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.CurveTimeline.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.CurveTimeline"/> class.
            </summary>
            <param name="frameCount">The frame count.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.CurveTimeline.Apply(WaveEngine.Components.Animation.Spine.Skeleton,System.Single,System.Single)">
            <summary>
            Sets the value(s) for the specified time.
            </summary>
            <param name="skeleton">The skeleton.</param>
            <param name="time">The time.</param>
            <param name="alpha">The alpha.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.CurveTimeline.SetLinear(System.Int32)">
            <summary>
            Sets the linear.
            </summary>
            <param name="frameIndex">Index of the frame.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.CurveTimeline.SetStepped(System.Int32)">
            <summary>
            Sets the stepped.
            </summary>
            <param name="frameIndex">Index of the frame.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.CurveTimeline.SetCurve(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the control handle positions for an interpolation bezier curve used to transition from this keyframe to the next.
            </summary>
            <param name="frameIndex">Index of the frame.</param>
            <param name="cx1">cx1 is from 0 to 1, representing the percent of time between the two keyframes.</param>
            <param name="cy1">cy1 is the percent of the difference between the keyframe's values.</param>
            <param name="cx2">cx2 is from 0 to 1, representing the percent of time between the two keyframes..</param>
            <param name="cy2">cy2 is the percent of the difference between the keyframe's values.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.CurveTimeline.GetCurvePercent(System.Int32,System.Single)">
            <summary>
            Gets the curve percent.
            </summary>
            <param name="frameIndex">Index of the frame.</param>
            <param name="percent">The percent.</param>
            <returns>Return percent.</returns>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.CurveTimeline.FrameCount">
            <summary>
            Gets the frame count.
            </summary>
            <value>
            The frame count.
            </value>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.ColorTimeline.lastFrameTime">
            <summary>
            The lastFrameTime
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.ColorTimeline.frameR">
            <summary>
            The frameR
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.ColorTimeline.frameG">
            <summary>
            The frameG
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.ColorTimeline.frameB">
            <summary>
            the frameB
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.ColorTimeline.frameA">
            <summary>
            The frameA
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.ColorTimeline.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.ColorTimeline"/> class.
            </summary>
            <param name="frameCount">The frame count.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.ColorTimeline.SetFrame(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the time and value of the specified keyframe. 
            </summary>
            <param name="frameIndex">Index of the frame.</param>
            <param name="time">The time.</param>
            <param name="r">The r.</param>
            <param name="g">The g.</param>
            <param name="b">The b.</param>
            <param name="a">The a.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.ColorTimeline.Apply(WaveEngine.Components.Animation.Spine.Skeleton,System.Single,System.Single)">
            <summary>
            Sets the value(s) for the specified time.
            </summary>
            <param name="skeleton">The skeleton.</param>
            <param name="time">The time.</param>
            <param name="alpha">The alpha.</param>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.ColorTimeline.SlotIndex">
            <summary>
            Gets or sets the index of the slot.
            </summary>
            <value>
            The index of the slot.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.ColorTimeline.Frames">
            <summary>
            Gets the frames.
            </summary>
            <value>
            The frames.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.QueueEntry">
            <summary>
            QueueEntry class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.QueueEntry.Animation">
            <summary>
            The animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.QueueEntry.Loop">
            <summary>
            The loop
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.QueueEntry.Delay">
            <summary>
            The delay
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.RegionAttachment">
            <summary>
            Attachment that displays a texture region.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.RegionAttachment.X1">
            <summary>
            The x1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.RegionAttachment.Y1">
            <summary>
            The y1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.RegionAttachment.X2">
            <summary>
            The x2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.RegionAttachment.Y2">
            <summary>
            The y2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.RegionAttachment.X3">
            <summary>
            The x3
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.RegionAttachment.Y3">
            <summary>
            The y3
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.RegionAttachment.X4">
            <summary>
            The x4
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.RegionAttachment.Y4">
            <summary>
            The y4
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.RegionAttachment.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.RegionAttachment"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.RegionAttachment.SetUVs(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Sets the U vs.
            </summary>
            <param name="u">The u.</param>
            <param name="v">The v.</param>
            <param name="u2">The u2.</param>
            <param name="v2">The v2.</param>
            <param name="rotate">if set to <c>true</c> [rotate].</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.RegionAttachment.UpdateOffset">
            <summary>
            Updates the offset.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.RegionAttachment.UpdateVertices(WaveEngine.Components.Animation.Spine.Bone)">
            <summary>
            Updates the vertices.
            </summary>
            <param name="bone">The bone.</param>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>
            The X.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>
            The Y.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.ScaleX">
            <summary>
            Gets or sets the scale X.
            </summary>
            <value>
            The scale X.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.ScaleY">
            <summary>
            Gets or sets the scale Y.
            </summary>
            <value>
            The scale Y.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.Rotation">
            <summary>
            Gets or sets the rotation.
            </summary>
            <value>
            The rotation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>
            The texture.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.RegionOffsetX">
            <summary>
            Gets or sets the region offset X.
            </summary>
            <value>
            The region offset X.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.RegionOffsetY">
            <summary>
            Gets or sets the region offset Y.
            </summary>
            <remarks>
            Pixels stripped from the bottom left, unrotated.
            </remarks>
            <value>
            The region offset Y.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.RegionWidth">
            <summary>
            Gets or sets the width of the region.
            </summary>
            <value>
            The width of the region.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.RegionHeight">
            <summary>
            Gets or sets the height of the region.
            </summary>
            <remarks>Unrotated, stripped size.</remarks>
            <value>
            The height of the region.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.RegionOriginalWidth">
            <summary>
            Gets or sets the width of the region original.
            </summary>
            <value>
            The width of the region original.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.RegionOriginalHeight">
            <summary>
            Gets or sets the height of the region original.
            </summary>
            <remarks>Unrotated, unstripped size.</remarks>
            <value>
            The height of the region original.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.Offset">
            <summary>
            Gets the offset.
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.Vertices">
            <summary>
            Gets the vertices.
            </summary>
            <value>
            The vertices.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RegionAttachment.UVs">
            <summary>
            Gets the U vs.
            </summary>
            <value>
            The U vs.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.Bone">
            <summary>
            Bone class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Bone.YDown">
            <summary>
            The y down
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Bone.#ctor(WaveEngine.Components.Animation.Spine.BoneData,WaveEngine.Components.Animation.Spine.Bone)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.Bone"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="parent">May be null.</param>
            <exception cref="T:System.ArgumentNullException">data cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Bone.UpdateWorldTransform(System.Boolean,System.Boolean)">
            <summary>
             Computes the world SRT using the parent bone and the local SRT. 
            </summary>
            <param name="flipX">if set to <c>true</c> [flip X].</param>
            <param name="flipY">if set to <c>true</c> [flip Y].</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Bone.SetToBindPose">
            <summary>
            Sets to bind pose.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Bone.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.Data">
            <summary>
            Gets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>
            The parent.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>
            The X.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>
            The Y.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.Rotation">
            <summary>
            Gets or sets the rotation.
            </summary>
            <value>
            The rotation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.OffsetRotation">
            <summary>
            Gets or sets the offset rotation. This rotation is added to the animation rotation.
            </summary>
            <value>
            The offset rotation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.ScaleX">
            <summary>
            Gets or sets the scale X.
            </summary>
            <value>
            The scale X.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.ScaleY">
            <summary>
            Gets or sets the scale Y.
            </summary>
            <value>
            The scale Y.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.M00">
            <summary>
            Gets the M00.
            </summary>
            <value>
            The M00.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.M01">
            <summary>
            Gets the M01.
            </summary>
            <value>
            The M01.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.M10">
            <summary>
            Gets the M10.
            </summary>
            <value>
            The M10.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.M11">
            <summary>
            Gets the M11.
            </summary>
            <value>
            The M11.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.WorldX">
            <summary>
            Gets the world X.
            </summary>
            <value>
            The world X.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.WorldY">
            <summary>
            Gets the world Y.
            </summary>
            <value>
            The world Y.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.WorldRotation">
            <summary>
            Gets the world rotation.
            </summary>
            <value>
            The world rotation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.WorldScaleX">
            <summary>
            Gets the world scale X.
            </summary>
            <value>
            The world scale X.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Bone.WorldScaleY">
            <summary>
            Gets the world scale Y.
            </summary>
            <value>
            The world scale Y.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.BoneData">
            <summary>
            BoneData class
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.BoneData.#ctor(System.String,WaveEngine.Components.Animation.Spine.BoneData)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.BoneData"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parent">May be null.</param>
            <exception cref="T:System.ArgumentNullException">name cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.BoneData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.BoneData.Parent">
            <summary>
            Gets the parent.
            </summary>
            <remarks>
            May be null. 
            </remarks>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.BoneData.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.BoneData.Length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.BoneData.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>
            The X.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.BoneData.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>
            The Y.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.BoneData.Rotation">
            <summary>
            Gets or sets the rotation.
            </summary>
            <value>
            The rotation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.BoneData.ScaleX">
            <summary>
            Gets or sets the scale X.
            </summary>
            <value>
            The scale X.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.BoneData.ScaleY">
            <summary>
            Gets or sets the scale Y.
            </summary>
            <value>
            The scale Y.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.Format">
            <summary>
            Format enum
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Format.Alpha">
            <summary>
            The alpha
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Format.Intensity">
            <summary>
            The intensity
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Format.LuminanceAlpha">
            <summary>
            The luminance alpha
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Format.RGB565">
            <summary>
            The RG B565
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Format.RGBA4444">
            <summary>
            The RGB a4444
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Format.RGB888">
            <summary>
            The RG B888
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Format.RGBA8888">
            <summary>
            The RGB a8888
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.Json">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            JSON uses Arrays and objects. These correspond here to the datatypes IList and IDictionary.
            All numbers are parsed to floats.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Deserialize(System.IO.TextReader)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An List&lt;object&gt;, a Dictionary&lt;string, object&gt;, a float, an integer,a string, null, true, or false</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Serialize(System.Object)">
            <summary>
            Converts a IDictionary / IList object or a simple type (string, int, etc.) into a JSON string
            </summary>
            <param name="obj">The obj.</param>
            <returns>
            A JSON encoded string, or null if object 'json' is not serializable
            </returns>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.Json.Parser">
            <summary>
            Parser class.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Parser.whiteSpace">
            <summary>
            The WHITE_SPACE
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Parser.wordBreak">
            <summary>
            The WORD_BREAK
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Parser.json">
            <summary>
            The json
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Parser.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.Json.Parser"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Parser.Parse(System.IO.TextReader)">
            <summary>
            Parses the specified reader.
            </summary>
            <param name="reader">The reader.</param>
            <returns>return parse value.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Parser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Parser.Parseobject">
            <summary>
            Parses the object.
            </summary>
            <returns>Return string, string dictionary.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Parser.ParseArray">
            <summary>
            Parses the array.
            </summary>
            <returns>Return list.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Parser.ParseValue">
            <summary>
            Parses the value.
            </summary>
            <returns>Return value as object.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Parser.ParseByToken(WaveEngine.Components.Animation.Spine.Json.Parser.TOKEN)">
            <summary>
            Parses the by token.
            </summary>
            <param name="token">The token.</param>
            <returns>Return value as object.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Parser.Parsestring">
            <summary>
            Parses the string.
            </summary>
            <returns>Return string.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Parser.ParseNumber">
            <summary>
            Parses the number.
            </summary>
            <returns>Return number as object.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Parser.EatWhitespace">
            <summary>
            Eats the whitespace.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Json.Parser.PeekChar">
            <summary>
            Gets the peek char.
            </summary>
            <value>
            The peek char.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Json.Parser.NextChar">
            <summary>
            Gets the next char.
            </summary>
            <value>
            The next char.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Json.Parser.NextWord">
            <summary>
            Gets the next word.
            </summary>
            <value>
            The next word.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Json.Parser.NextToken">
            <summary>
            Gets the next token.
            </summary>
            <value>
            The next token.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.Json.Parser.TOKEN">
            <summary>
            Token enum.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Parser.TOKEN.NONE">
            <summary>
            The NONE
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Parser.TOKEN.CURLY_OPEN">
            <summary>
            The CURL y_ OPEN
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Parser.TOKEN.CURLY_CLOSE">
            <summary>
            The CURL y_ CLOSE
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Parser.TOKEN.SQUARED_OPEN">
            <summary>
            The SQUARE d_ OPEN
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Parser.TOKEN.SQUARED_CLOSE">
            <summary>
            The SQUARE d_ CLOSE
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Parser.TOKEN.COLON">
            <summary>
            The COLON
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Parser.TOKEN.COMMA">
            <summary>
            The COMMA
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Parser.TOKEN.String">
            <summary>
            The string
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Parser.TOKEN.NUMBER">
            <summary>
            The NUMBER
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Parser.TOKEN.TRUE">
            <summary>
            The TRUE
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Parser.TOKEN.FALSE">
            <summary>
            The FALSE
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Parser.TOKEN.NULL">
            <summary>
            The NULL
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.Json.Serializer">
            <summary>
            Serializer class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Json.Serializer.builder">
            <summary>
            The builder
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Serializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.Json.Serializer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Serializer.Serialize(System.Object)">
            <summary>
            Serializes the specified obj.
            </summary>
            <param name="obj">The obj.</param>
            <returns>Return string.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Serializer.SerializeValue(System.Object)">
            <summary>
            Serializes the value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Serializer.Serializeobject(System.Collections.IDictionary)">
            <summary>
            Serializes the object.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Serializer.SerializeArray(System.Collections.IList)">
            <summary>
            Serializes the array.
            </summary>
            <param name="anArray">An array.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Serializer.Serializestring(System.String)">
            <summary>
            Serializes the string.
            </summary>
            <param name="str">The STR.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Json.Serializer.SerializeOther(System.Object)">
            <summary>
            Serializes the other.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.RotateTimeline">
            <summary>
            RotateTimeLine class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.RotateTimeline.lastFrameTime">
            <summary>
            The lastFrameTime
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.RotateTimeline.frameValue">
            <summary>
            The frameValue
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.RotateTimeline.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.RotateTimeline"/> class.
            </summary>
            <param name="frameCount">The frame count.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.RotateTimeline.SetFrame(System.Int32,System.Single,System.Single)">
            <summary>
            Sets the time and value of the specified keyframe.
            </summary>
            <param name="frameIndex">Index of the frame.</param>
            <param name="time">The time.</param>
            <param name="angle">The angle.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.RotateTimeline.Apply(WaveEngine.Components.Animation.Spine.Skeleton,System.Single,System.Single)">
            <summary>
            Sets the value(s) for the specified time.
            </summary>
            <param name="skeleton">The skeleton.</param>
            <param name="time">The time.</param>
            <param name="alpha">The alpha.</param>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RotateTimeline.BoneIndex">
            <summary>
            Gets or sets the index of the bone.
            </summary>
            <value>
            The index of the bone.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.RotateTimeline.Frames">
            <summary>
            Gets the frames.
            </summary>
            <value>
            The frames.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.ScaleTimeline">
            <summary>
            ScaleTimeLine class
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.TranslateTimeline">
            <summary>
            TranslateTimeLine class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.TranslateTimeline.lastFrameTime">
            <summary>
            The LAST_FRAME_TIME
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.TranslateTimeline.frameX">
            <summary>
            The FRAME_X
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.TranslateTimeline.frameY">
            <summary>
            The FRAME_Y
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.TranslateTimeline.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.TranslateTimeline"/> class.
            </summary>
            <param name="frameCount">The frame count.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.TranslateTimeline.SetFrame(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets the time and value of the specified keyframe. 
            </summary>
            <param name="frameIndex">Index of the frame.</param>
            <param name="time">The time.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.TranslateTimeline.Apply(WaveEngine.Components.Animation.Spine.Skeleton,System.Single,System.Single)">
            <summary>
            Sets the value(s) for the specified time.
            </summary>
            <param name="skeleton">The skeleton.</param>
            <param name="time">The time.</param>
            <param name="alpha">The alpha.</param>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.TranslateTimeline.BoneIndex">
            <summary>
            Gets or sets the index of the bone.
            </summary>
            <value>
            The index of the bone.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.TranslateTimeline.Frames">
            <summary>
            Gets the frames.
            </summary>
            <value>
            The frames.
            </value>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.ScaleTimeline.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.ScaleTimeline"/> class.
            </summary>
            <param name="frameCount">The frame count.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.ScaleTimeline.Apply(WaveEngine.Components.Animation.Spine.Skeleton,System.Single,System.Single)">
            <summary>
            Sets the value(s) for the specified time.
            </summary>
            <param name="skeleton">The skeleton.</param>
            <param name="time">The time.</param>
            <param name="alpha">The alpha.</param>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.Skeleton">
            <summary>
            Skeleton class
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skeleton.#ctor(WaveEngine.Components.Animation.Spine.SkeletonData)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.Skeleton"/> class.
            </summary>
            <param name="data">The data.</param>
            <exception cref="T:System.ArgumentNullException">data cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skeleton.UpdateWorldTransform">
            <summary>
            Updates the world transform for each bone.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skeleton.SetToBindPose">
            <summary>
             Sets the bones and slots to their bind pose values.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skeleton.SetBonesToBindPose">
            <summary>
            Sets the bones to bind pose.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skeleton.SetSlotsToBindPose">
            <summary>
            Sets the slots to bind pose.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skeleton.FindBone(System.String)">
            <summary>
            Finds the bone.
            </summary>
            <param name="boneName">Name of the bone.</param>
            <returns>May be null.</returns>
            <exception cref="T:System.ArgumentNullException">boneName cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skeleton.FindBoneIndex(System.String)">
            <summary>
            Finds the index of the bone.
            </summary>
            <param name="boneName">Name of the bone.</param>
            <returns>-1 if the bone was not found.</returns>
            <exception cref="T:System.ArgumentNullException">boneName cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skeleton.FindSlot(System.String)">
            <summary>
            Finds the slot.
            </summary>
            <param name="slotName">Name of the slot.</param>
            <returns>my be null.</returns>
            <exception cref="T:System.ArgumentNullException">slotName cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skeleton.FindSlotIndex(System.String)">
            <summary>
            Finds the index of the slot.
            </summary>
            <param name="slotName">Name of the slot.</param>
            <returns>-1 if the bone was not found. </returns>
            <exception cref="T:System.ArgumentNullException">slotName cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skeleton.SetSkin(System.String)">
            <summary>
            Sets a skin by name.
            </summary>
            <param name="skinName">Name of the skin.</param>
            <exception cref="T:System.ArgumentException">Skin not found:  + skinName</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skeleton.SetSkin(WaveEngine.Components.Animation.Spine.Skin)">
            <summary>
             Sets the skin used to look up attachments not found in the  <see cref="T:WaveEngine.Components.Animation.Spine.SkeletonData"/> class Attachments 
             from the new skin are attached if the corresponding attachment from the old skin was attached.
            </summary>
            <param name="newSkin">The new skin. (may be null)</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skeleton.GetAttachment(System.String,System.String)">
            <summary>
            Gets the attachment.
            </summary>
            <param name="slotName">Name of the slot.</param>
            <param name="attachmentName">Name of the attachment.</param>
            <returns>May be null.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skeleton.GetAttachment(System.Int32,System.String)">
            <summary>
            Gets the attachment.
            </summary>
            <param name="slotIndex">Index of the slot.</param>
            <param name="attachmentName">Name of the attachment.(may be null)</param>
            <returns>Return attachment.</returns>
            <exception cref="T:System.ArgumentNullException">attachmentName cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skeleton.SetAttachment(System.String,System.String)">
            <summary>
            Sets the attachment.
            </summary>
            <param name="slotName">Name of the slot.</param>
            <param name="attachmentName">May be null.</param>
            <exception cref="T:System.ArgumentNullException">slotName cannot be null.</exception>
            <exception cref="T:System.Exception">Slot not found:  + slotName</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skeleton.Update(System.Single)">
            <summary>
            Updates the specified delta.
            </summary>
            <param name="delta">The delta.</param>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Skeleton.Data">
            <summary>
            Gets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Skeleton.Bones">
            <summary>
            Gets the bones.
            </summary>
            <value>
            The bones.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Skeleton.Slots">
            <summary>
            Gets the slots.
            </summary>
            <value>
            The slots.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Skeleton.DrawOrder">
            <summary>
            Gets the draw order.
            </summary>
            <value>
            The draw order.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Skeleton.Skin">
            <summary>
            Gets or sets the skin.
            </summary>
            <value>
            The skin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Skeleton.R">
            <summary>
            Gets or sets the R.
            </summary>
            <value>
            The R.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Skeleton.G">
            <summary>
            Gets or sets the G.
            </summary>
            <value>
            The G.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Skeleton.B">
            <summary>
            Gets or sets the B.
            </summary>
            <value>
            The B.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Skeleton.A">
            <summary>
            Gets or sets the A.
            </summary>
            <value>
            The A.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Skeleton.Time">
            <summary>
            Gets or sets the time.
            </summary>
            <value>
            The time.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Skeleton.FlipX">
            <summary>
            Gets or sets a value indicating whether [flip X].
            </summary>
            <value>
              <c>true</c> if [flip X]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Skeleton.FlipY">
            <summary>
            Gets or sets a value indicating whether [flip Y].
            </summary>
            <value>
              <c>true</c> if [flip Y]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Skeleton.RootBone">
            <summary>
            Gets the root bone.
            </summary>
            <value>
            The root bone.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.SkeletonData">
            <summary>
            SkeletonData class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.SkeletonData.DefaultSkin">
            <summary>
            The default skin
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.SkeletonData"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonData.AddBone(WaveEngine.Components.Animation.Spine.BoneData)">
            <summary>
            Adds the bone.
            </summary>
            <param name="bone">The bone.</param>
            <exception cref="T:System.ArgumentNullException">bone cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonData.FindBone(System.String)">
            <summary>
            Finds the bone.
            </summary>
            <param name="boneName">Name of the bone.</param>
            <returns>May be null.</returns>
            <exception cref="T:System.ArgumentNullException">boneName cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonData.FindBoneIndex(System.String)">
            <summary>
            Finds the index of the bone.
            </summary>
            <param name="boneName">Name of the bone.</param>
            <returns>-1 if the bone was not found. </returns>
            <exception cref="T:System.ArgumentNullException">boneName cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonData.AddSlot(WaveEngine.Components.Animation.Spine.SlotData)">
            <summary>
            Adds the slot.
            </summary>
            <param name="slot">The slot.</param>
            <exception cref="T:System.ArgumentNullException">slot cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonData.FindSlot(System.String)">
            <summary>
            Finds the slot.
            </summary>
            <param name="slotName">Name of the slot.</param>
            <returns>May be null. </returns>
            <exception cref="T:System.ArgumentNullException">slotName cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonData.FindSlotIndex(System.String)">
            <summary>
            Finds the index of the slot.
            </summary>
            <param name="slotName">Name of the slot.</param>
            <returns>-1 if the bone was not found.</returns>
            <exception cref="T:System.ArgumentNullException">slotName cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonData.AddSkin(WaveEngine.Components.Animation.Spine.Skin)">
            <summary>
            Adds the skin.
            </summary>
            <param name="skin">The skin.</param>
            <exception cref="T:System.ArgumentNullException">skin cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonData.FindSkin(System.String)">
            <summary>
            Finds the skin.
            </summary>
            <param name="skinName">Name of the skin.</param>
            <returns>May be null.</returns>
            <exception cref="T:System.ArgumentNullException">skinName cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonData.AddAnimation(WaveEngine.Components.Animation.Spine.Animation)">
            <summary>
            Adds the animation.
            </summary>
            <param name="animation">The animation.</param>
            <exception cref="T:System.ArgumentNullException">animation cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonData.FindAnimation(System.String)">
            <summary>
            Finds the animation.
            </summary>
            <param name="animationName">Name of the animation.</param>
            <returns>May be null.</returns>
            <exception cref="T:System.ArgumentNullException">animationName cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.SkeletonData.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.SkeletonData.Bones">
            <summary>
            Gets the bones.
            </summary>
            <remarks>Ordered parents first.</remarks>
            <value>
            The bones.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.SkeletonData.Slots">
            <summary>
            Gets the slots.
            </summary>
            <remarks>// Bind pose draw order.</remarks>
            <value>
            The slots.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.SkeletonData.Skins">
            <summary>
            Gets the skins.
            </summary>
            <value>
            The skins.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.SkeletonData.Animations">
            <summary>
            Gets the animations.
            </summary>
            <value>
            The animations.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.SkeletonJson">
            <summary>
            SkeletonJson class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.SkeletonJson.TimelineScale">
            <summary>
            The TIMELINE_SCALE
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.SkeletonJson.TimelineRotate">
            <summary>
            The TIMELINE_ROTATE
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.SkeletonJson.TimelineTranslate">
            <summary>
            The TIMELINE_TRANSLATE
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.SkeletonJson.TimelineAttachment">
            <summary>
            The TIMELINE_ATTACHMENT
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.SkeletonJson.TimelineColor">
            <summary>
            The TIMELINE_COLOR
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.SkeletonJson.AttachmentRegion">
            <summary>
            The ATTACHMENT_REGION
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.SkeletonJson.AttachmentRegionSequence">
            <summary>
            The ATTACHMENT_REGION_SEQUENCE
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.SkeletonJson.attachmentLoader">
            <summary>
            The attachment loader
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonJson.#ctor(WaveEngine.Components.Animation.Spine.Atlas)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.SkeletonJson"/> class.
            </summary>
            <param name="atlas">The atlas.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonJson.#ctor(WaveEngine.Components.Animation.Spine.IAttachmentLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.SkeletonJson"/> class.
            </summary>
            <param name="attachmentLoader">The attachment loader.</param>
            <exception cref="T:System.ArgumentNullException">attachmentLoader cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonJson.ReadSkeletonData(System.String)">
            <summary>
            Reads the skeleton data.
            </summary>
            <param name="path">The path.</param>
            <returns>Return SkeletonData.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonJson.ReadSkeletonData(System.IO.TextReader)">
            <summary>
            Reads the skeleton data.
            </summary>
            <param name="reader">The reader.</param>
            <returns>Return SkeletonData.</returns>
            <exception cref="T:System.ArgumentNullException">reader cannot be null.</exception>
            <exception cref="T:System.Exception">Invalid JSON.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonJson.ToColor(System.String,System.Int32)">
            <summary>
            To the color.
            </summary>
            <param name="hexstring">The hex string.</param>
            <param name="colorIndex">Index of the color.</param>
            <returns>Return color as float.</returns>
            <exception cref="T:System.ArgumentException">Color hexidecimal length must be 8, recieved:  + hexstring</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonJson.ReadAttachment(WaveEngine.Components.Animation.Spine.Skin,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Reads the attachment.
            </summary>
            <param name="skin">The skin.</param>
            <param name="name">The name.</param>
            <param name="map">The map.</param>
            <returns>Return attachment.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonJson.GetFloat(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Single)">
            <summary>
            Gets the float.
            </summary>
            <param name="map">The map.</param>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Return float.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonJson.ReadAnimation(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},WaveEngine.Components.Animation.Spine.SkeletonData)">
            <summary>
            Reads the animation.
            </summary>
            <param name="name">The name.</param>
            <param name="map">The map.</param>
            <param name="skeletonData">The skeleton data.</param>
            <exception cref="T:System.Exception">Bone not found:  + boneName</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SkeletonJson.ReadCurve(WaveEngine.Components.Animation.Spine.CurveTimeline,System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Reads the curve.
            </summary>
            <param name="timeline">The timeline.</param>
            <param name="frameIndex">Index of the frame.</param>
            <param name="valueMap">The value map.</param>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.SkeletonJson.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>
            The scale.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.Skin">
            <summary>
            Stores attachments by slot index and attachment name.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Skin.attachments">
            <summary>
            The attachments
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skin.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.Skin"/> class.
            </summary>
            <param name="name">The name.</param>
            <exception cref="T:System.ArgumentNullException">name cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skin.AddAttachment(System.Int32,System.String,WaveEngine.Components.Animation.Spine.Attachment)">
            <summary>
            Adds the attachment.
            </summary>
            <param name="slotIndex">Index of the slot.</param>
            <param name="name">The name.</param>
            <param name="attachment">The attachment.</param>
            <exception cref="T:System.ArgumentNullException">attachment cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skin.GetAttachment(System.Int32,System.String)">
            <summary>
            Gets the attachment.
            </summary>
            <param name="slotIndex">Index of the slot.</param>
            <param name="name">The name.</param>
            <returns>May be null.</returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skin.FindNamesForSlot(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Finds the names for slot.
            </summary>
            <param name="slotIndex">Index of the slot.</param>
            <param name="names">The names.</param>
            <exception cref="T:System.ArgumentNullException">names cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skin.FindAttachmentsForSlot(System.Int32,System.Collections.Generic.List{WaveEngine.Components.Animation.Spine.Attachment})">
            <summary>
            Finds the attachments for slot.
            </summary>
            <param name="slotIndex">Index of the slot.</param>
            <param name="attachments">The attachments.</param>
            <exception cref="T:System.ArgumentNullException">attachments cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skin.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Skin.AttachAll(WaveEngine.Components.Animation.Spine.Skeleton,WaveEngine.Components.Animation.Spine.Skin)">
            <summary>
            Attach all attachments from this skin if the corresponding attachment from the old skin is currently attached.
            </summary>
            <param name="skeleton">The skeleton.</param>
            <param name="oldSkin">The old skin.</param>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Skin.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.Slot">
            <summary>
            Slot class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Slot.attachment">
            <summary>
            The attachment
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.Slot.attachmentTime">
            <summary>
            The attachment time
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Slot.#ctor(WaveEngine.Components.Animation.Spine.SlotData,WaveEngine.Components.Animation.Spine.Skeleton,WaveEngine.Components.Animation.Spine.Bone)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.Slot"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="skeleton">The skeleton.</param>
            <param name="bone">The bone.</param>
            <exception cref="T:System.ArgumentNullException">data cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Slot.SetToBindPose">
            <summary>
            Sets to bind pose.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Slot.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.Slot.SetToBindPose(System.Int32)">
            <summary>
            Sets to bind pose.
            </summary>
            <param name="slotIndex">Index of the slot.</param>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Slot.Data">
            <summary>
            Gets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Slot.Bone">
            <summary>
            Gets the bone.
            </summary>
            <value>
            The bone.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Slot.Skeleton">
            <summary>
            Gets the skeleton.
            </summary>
            <value>
            The skeleton.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Slot.R">
            <summary>
            Gets or sets the R.
            </summary>
            <value>
            The R.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Slot.G">
            <summary>
            Gets or sets the G.
            </summary>
            <value>
            The G.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Slot.B">
            <summary>
            Gets or sets the B.
            </summary>
            <value>
            The B.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Slot.A">
            <summary>
            Gets or sets the A.
            </summary>
            <value>
            The A.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Slot.Attachment">
            <summary>
            Gets or sets the attachment.
            </summary>
            <value>
            The attachment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.Slot.AttachmentTime">
            <summary>
            Gets or sets the attachment time.
            </summary>
            <value>
            The attachment time.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.SlotData">
            <summary>
            SlotData class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SlotData.#ctor(System.String,WaveEngine.Components.Animation.Spine.BoneData)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.Spine.SlotData"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="boneData">The bone data.</param>
            <exception cref="T:System.ArgumentNullException">name cannot be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.SlotData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.SlotData.Name">
            <summary>
            Gets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.SlotData.BoneData">
            <summary>
            Gets the bone data.
            </summary>
            <value>
            The bone data.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.SlotData.R">
            <summary>
            Gets or sets the R.
            </summary>
            <value>
            The R.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.SlotData.G">
            <summary>
            Gets or sets the G.
            </summary>
            <value>
            The G.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.SlotData.B">
            <summary>
            Gets or sets the B.
            </summary>
            <value>
            The B.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.SlotData.A">
            <summary>
            Gets or sets the A.
            </summary>
            <value>
            The A.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.Spine.SlotData.AttachmentName">
            <summary>
            Gets or sets the name of the attachment.
            </summary>
            <value>
            The name of the attachment.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.TextureFilter">
            <summary>
            TextureFilter enum.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.TextureFilter.Nearest">
            <summary>
            The nearest
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.TextureFilter.Linear">
            <summary>
            The linear
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.TextureFilter.MipMap">
            <summary>
            The mip map
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.TextureFilter.MipMapNearestNearest">
            <summary>
            The mip map nearest nearest
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.TextureFilter.MipMapLinearNearest">
            <summary>
            The mip map linear nearest
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.TextureFilter.MipMapNearestLinear">
            <summary>
            The mip map nearest linear
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.TextureFilter.MipMapLinearLinear">
            <summary>
            The mip map linear linear
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.ITextureLoader">
            <summary>
            TextureLoader interface.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.ITextureLoader.Load(WaveEngine.Components.Animation.Spine.AtlasPage,System.String)">
            <summary>
            Loads the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.Spine.ITextureLoader.Unload(System.Object)">
            <summary>
            Unloads the specified texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="T:WaveEngine.Components.Animation.Spine.TextureWrap">
            <summary>
            TextureWrap enum.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.TextureWrap.MirroredRepeat">
            <summary>
            The mirrored repeat
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.TextureWrap.ClampToEdge">
            <summary>
            The clamp to edge
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.Spine.TextureWrap.Repeat">
            <summary>
            The repeat
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.SpriteSheetAnimationSequence">
            <summary>
            Specifies a sequence within the returning frames of a <see cref="T:WaveEngine.Components.Animation.ISpriteSheetLoader"/>.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.SpriteSheetAnimationSequence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.SpriteSheetAnimationSequence"/> class.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.SpriteSheetAnimationSequence.First">
            <summary>
            Gets or sets the 1-based index of the first frame.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.SpriteSheetAnimationSequence.Length">
            <summary>
            Gets or sets the sequence length.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.SpriteSheetAnimationSequence.FramesPerSecond">
            <summary>
            Gets or sets the dessired frames per second.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.TexturePackerGenericXml">
            <summary>
            Texture Packer's Generic XML sprite sheet loader.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.TexturePackerGenericXml.Parse(System.String)">
            <summary>
            Parses the passed XML looking for frame info.
            </summary>
            <param name="path">Path to the XML.</param>
            <returns>Array of <see cref="T:WaveEngine.Common.Math.Rectangle"/>.</returns>
        </member>
        <member name="T:WaveEngine.Components.Cameras.FixedCamera">
            <summary>
            FixedCamera decorate class
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FixedCamera.#ctor(System.String,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.FixedCamera"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="position">The position.</param>
            <param name="lookAt">The look at.</param>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera.FieldOfView">
            <summary>
            Gets or sets the filed of view.
            </summary>
            <value>
            The filed of view.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera.AspectRatio">
            <summary>
            Gets or sets the aspect ratio.
            </summary>
            <value>
            The aspect ratio.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera.FarPlane">
            <summary>
            Gets or sets the far plane.
            </summary>
            <value>
            The far plane.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera.NearPlane">
            <summary>
            Gets or sets the near plane.
            </summary>
            <value>
            The near plane.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera.RenderTarget">
            <summary>
            Gets or sets the RenderTarget associated to the camera.
            </summary>
            <value>
            The render target.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera.ClearFlags">
            <summary>
            Gets or sets Clear flags used for clean FrameBuffer, stencilbuffer and Zbuffer.
            </summary>
            <value>
            The clear flags.
            </value>
            <exception cref="T:System.ObjectDisposedException">RenderManager has been disposed.</exception>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>
            The background color of the camera if it was setted, or the RenderManager default background color.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FixedCamera.LayerMask">
            <summary>
            Gets the layer mask.
            </summary>
            <value>
            The layer mask.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Cameras.FreeCamera">
            <summary>
            FreeCamera decorate class
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCamera.#ctor(System.String,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.FreeCamera"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="position">The position.</param>
            <param name="lookAt">The look at.</param>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FreeCamera.RotationSpeed">
            <summary>
            Gets or sets the rotation speed.
            </summary>
            <value>
            The rotation speed.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FreeCamera.Speed">
            <summary>
            Gets or sets the speed.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Cameras.PathCamera">
            <summary>
            PathCamera decorate class
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.PathCamera.#ctor(System.String,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Collections.Generic.List{WaveEngine.Components.Cameras.CameraPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.PathCamera"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="position">The position.</param>
            <param name="lookAt">The look at.</param>
            <param name="cameraPointList">The camera point list.</param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.PathCamera.#ctor(System.String,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Collections.Generic.List{WaveEngine.Components.Cameras.CameraPoint},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.PathCamera"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="position">The position.</param>
            <param name="lookAt">The look at.</param>
            <param name="cameraPointList">The camera point list.</param>
            <param name="pathFrames">The path frames.</param>
        </member>
        <member name="P:WaveEngine.Components.Cameras.PathCamera.CurrentState">
            <summary>
            Gets or sets the state of the current.
            </summary>
            <value>
            The state of the current.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.PathCamera.Speed">
            <summary>
            Gets or sets the speed.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Cameras.ThirdPersonCamera">
            <summary>
            Third person camera decorate class
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ThirdPersonCamera.#ctor(System.String,WaveEngine.Framework.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.ThirdPersonCamera"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="entityToFollow">The entity to follow.</param>
        </member>
        <member name="P:WaveEngine.Components.Cameras.ThirdPersonCamera.CameraDistance">
            <summary>
            Gets or sets the camera distance.
            </summary>
            <value>
            The camera distance.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.ThirdPersonCamera.TargetPosition">
            <summary>
            Gets or sets the target position.
            </summary>
            <value>
            The target position.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Cameras.ViewCamera">
            <summary>
            ViewCamera decorate class
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ViewCamera.#ctor(System.String,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.ViewCamera"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="position">The position.</param>
            <param name="lookAt">The look at.</param>
        </member>
        <member name="P:WaveEngine.Components.Cameras.ViewCamera.RotationSpeed">
            <summary>
            Gets or sets the rotation speed.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.AnimatedSpriteRenderer">
            <summary>
            Custom sprite renderer to support 2D animations
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.AnimatedSpriteRenderer.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.AnimatedSpriteRenderer.Transform2D">
            <summary>
            Transform of the <see cref="T:WaveEngine.Components.Graphics2D.Sprite"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.AnimatedSpriteRenderer.Sprite">
            <summary>
            <see cref="T:WaveEngine.Components.Graphics2D.Sprite"/> to render.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.AnimatedSpriteRenderer.position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.AnimatedSpriteRenderer.scale">
            <summary>
            The scale
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.AnimatedSpriteRenderer.origin">
            <summary>
            The origin
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.AnimatedSpriteRenderer.Animation2D">
            <summary>
            The animation behavior
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.AnimatedSpriteRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.AnimatedSpriteRenderer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.AnimatedSpriteRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.AnimatedSpriteRenderer"/> class.
            </summary>
            <param name="layer">Layer type.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.AnimatedSpriteRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable"/> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.AnimatedSpriteRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.Material2D">
            <summary>
            Component to managed materials 2D
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Material2D.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Material2D.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Material2D.#ctor(WaveEngine.Framework.Graphics.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.Material2D"/> class.
            </summary>
            <param name="material">The material.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Material2D.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Material2D.Initialize">
            <summary>
            Initialices the component.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Material2D.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Material2D.Material">
            <summary>
            Gets or sets the material.
            </summary>
            <value>
            The material.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D">
            <summary>
            Renders a 2D particle system on the screen.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.VELOCITYFACTOR">
            <summary>
            Velocity adjust of the particles.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.InitTimeMultipler">
            <summary>
            The init time multipler
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.localWorld">
            <summary>
            The renderer local world
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.TEXCOORD1">
            <summary>
            The texcoord1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.TEXCOORD2">
            <summary>
            The texcoord2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.TEXCOORD3">
            <summary>
            The texcoord3
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.TEXCOORD4">
            <summary>
            The texcoord4
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.viewportScale">
            <summary>
            Scale of the viewport.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.viewportTranslate">
            <summary>
            Translation of the viewport.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.viewportEnabled">
            <summary>
            If the viewport is enabled.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.System">
            <summary>
            Particle system rendered.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.Material">
            <summary>
            Materials used rendering the particle system.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.Transform">
            <summary>
            Transform of the particle system emitter.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.random">
            <summary>
            The random
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.aliveParticles">
            <summary>
            The alive particles
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.numParticles">
            <summary>
            The num particles
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.numVertices">
            <summary>
            The num vertices
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.numIndices">
            <summary>
            The num indices
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.numPrimitives">
            <summary>
            The num primitives
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.particles">
            <summary>
            The particles
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.emitedParticle">
            <summary>
            If the current frame a particle was emited.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.vertices">
            <summary>
            The vertices
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.mesh">
            <summary>
            Particle mesh
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.settings">
            <summary>
            The settings
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.internalEnabled">
            <summary>
            The internal enabled
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.vertex1">
            <summary>
            The vertex1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.vertex2">
            <summary>
            The vertex2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.vertex3">
            <summary>
            The vertex3
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.vertex4">
            <summary>
            The vertex4
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.rotationMatrix">
            <summary>
            The rotation matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.rotationVector">
            <summary>
            The rotation vector
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.emitLapse">
            <summary>
            Time passed between 2 particles.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.emitRemainder">
            <summary>
            Remainder time of the prev frame.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.Draw(System.TimeSpan)">
            <summary>
            Draws the particle system.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.ResolveDependencies">
            <summary>
            Resolve the dependencies
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.LoadParticleSystem">
            <summary>
            Set the current settings to the particle system attached
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.ResetParticle(WaveEngine.Components.Particles.Particle@)">
            <summary>
            Resets the particle.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.ParticleSystemRenderer2D.CalculateLocalWorld(WaveEngine.Components.Particles.Particle@)">
            <summary>
            Calculates the local world.
            </summary>
            <param name="p">The p.</param>
            <returns>World matrix.</returns>
            <exception cref="T:System.ObjectDisposedException">ParticleSystemRenderer has been disposed.</exception>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.SkeletalData">
            <summary>
            Hold all skeletal 2D info
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalData.instances">
            <summary>
                Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalData.atlasPath">
            <summary>
            The atlas path
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalData.atlas">
            <summary>
            The atlas
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalData.Transform2D">
            <summary>
            The transform2 D
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SkeletalData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.SkeletalData"/> class.
            </summary>
            <param name="atlasPath">The atlas path.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SkeletalData.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SkeletalData.Atlas">
            <summary>
            Gets the atlas.
            </summary>
            <value>
            The atlas.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.SkeletalRenderer">
            <summary>
            Render a 2D skeletal on screen
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.Transform2D">
            <summary>
            Transform of the <see cref="T:WaveEngine.Components.Graphics2D.Sprite"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.SkeletalData">
            <summary>
            The skeletal data
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.SkeletalAnimation">
            <summary>
            The skeletal animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.material">
            <summary>
            The material
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.drawOrder">
            <summary>
            The draw order
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.vertices">
            <summary>
            The vertices
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.tempVertice">
            <summary>
            Temporal vertice used to set values to vertex array
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.spineMesh">
            <summary>
            The mesh
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.viewportManager">
            <summary>
            The viewport manager cached
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.position">
            <summary>
            The position cached
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.scale">
            <summary>
            The scale cached
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.internalPosition">
            <summary>
            The internal position cached
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.internalScale">
            <summary>
            The internal scale cached
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.localWorld">
            <summary>
            The local world
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.quaternionMatrix">
            <summary>
            The quaternion matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.translationMatrix">
            <summary>
            The translation matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.scaleMatrix">
            <summary>
            The scale matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.orientation">
            <summary>
            The orientation
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SkeletalRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.SkeletalRenderer"/> class.
            </summary>
            <remarks>
            This constructor uses Alpha layer.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SkeletalRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.SkeletalRenderer"/> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SkeletalRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SkeletalRenderer.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SkeletalRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines /&gt;
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SkeletalRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SkeletalRenderer.DebugBonesColor">
            <summary>
            Gets or sets the color of the debug bones.
            </summary>
            <value>
            The color of the debug bones.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SkeletalRenderer.DebugQuadColor">
            <summary>
            Gets or sets the color of the debug quad.
            </summary>
            <value>
            The color of the debug quad.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SkeletalRenderer.ActualDebugMode">
            <summary>
            Gets or sets a value indicating whether [debug mode].
            </summary>
            <value>
              <c>true</c> if [debug mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.SkeletalRenderer.DebugMode">
            <summary>
            Debug modes
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.DebugMode.None">
            <summary>
            The none
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.DebugMode.Bones">
            <summary>
            The bones
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SkeletalRenderer.DebugMode.Quads">
            <summary>
            The quads
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.Sprite">
            <summary>
            Represents a 2D image. Such image is loaded from a content file (.wpk),
            which is generated from a main PNG or JPEG file format.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.texturePath">
            <summary>
            Sprite texture path
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.texture">
            <summary>
            The sprite texture
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.isGlobalAsset">
            <summary>
            The is global asset.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.Transform2D">
            <summary>
            Required 2D transform.
            See <see cref="F:WaveEngine.Components.Graphics2D.Sprite.Transform2D"/> for more information.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.Sprite.sourceRectangle">
            <summary>
            Rectangle that represents this sprite in case it is part of a bigger image.
            Most of the cases this field will be null, which means the entire texture is used.
            On the other side, if a value is provided, will mean the rectangle (inside the original
            texture's rectangle) to be drawn.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.Sprite"/> class
            based on a content file.
            </summary>
            <param name="texturePath">The texture path to the content file.</param>
            <exception cref="T:System.ArgumentException">TexturePath can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.#ctor(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.Sprite"/> class
            based on a texture.
            See <see cref="P:WaveEngine.Components.Graphics2D.Sprite.Texture"/> for more information.
            </summary>
            <param name="texture">The texture.</param>
            <exception cref="T:System.ArgumentException">Texture can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.Sprite.UpdateSourceRectangle">
            <summary>
            The update source rectangle.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Sprite has been disposed.</exception>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Sprite.IsGlobalAsset">
            <summary>
            Gets or sets a value indicating whether this asset is global.
            By "global" it is meant this asset will be consumed anywhere else. It implies 
            once this component is disposed, the asset it-self will not be unload from memory.
            </summary>
            <value>
                <c>true</c> if this asset is global; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Sprite.SourceRectangle">
            <summary>
            Gets or sets the Rectangle that represents this sprite in case it is part of a bigger image.
            Most of the cases this field will be null, which means the entire texture is used.
            On the other side, if a value is provided, will mean the rectangle (inside the original
            texture's rectangle) to be drawn.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Sprite.TexturePath">
            <summary>
            Gets the texture path.
            Such path is platform agnostic, and will always start with "Content/".
            Example: "Content/Characters/Tim.wpk"
            </summary>
            <value>
                The texture path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Sprite.Texture">
            <summary>
                Gets the texture.
                Such is the in-memory representation for the given asset.
                See <see cref="P:WaveEngine.Components.Graphics2D.Sprite.Texture"/> for more information.
            </summary>
            <value>
                The texture.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.Sprite.TintColor">
            <summary>
            Gets or sets the tint color.
            Each pixel of the sprite will be multiplied by such color during the drawing.
            By default, it is white.
            </summary>
            <value>
            The tint color.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.SpriteAtlas">
            <summary>
                A collection of images.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlas.instances">
            <summary>
                Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlas.SourceRectangle">
            <summary>
                Rectangle for the Image of the atlas that will be rendered.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlas.Transform2D">
            <summary>
                Transform for the Image of the atlas that will be rendered.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlas.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlas.isGlobalAsset">
            <summary>
            The is global asset.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlas.textureName">
            <summary>
            The texture name.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.SpriteAtlas"/> class.
            </summary>
            <param name="atlasPath">The path to the atlas.</param>
            <exception cref="T:System.ArgumentException">TexturePath can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.SpriteAtlas"/> class.
            </summary>
            <param name="atlasPath">The path to the atlas.</param>
            <param name="textureName">Name of the texture from where this atlas is loaded.</param>
            <exception cref="T:System.ArgumentException">TexturePath can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.Initialize">
            <summary>
                Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlas.UpdateSourceRectangle">
            <summary>
            The update source rectangle.
            </summary>
            <exception cref="T:System.ObjectDisposedException">ImageAtlasRenderer has been disposed.</exception>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SpriteAtlas.AtlasPath">
            <summary>
                Gets or sets the path to the atlas.
            </summary>
            <value>
                The atlas path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SpriteAtlas.IsGlobalAsset">
            <summary>
                Gets or sets a value indicating whether this asset is global.
            </summary>
            <value>
                <c>true</c> if this asset is global; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SpriteAtlas.TextureAtlas">
            <summary>
                Gets or sets the texture atlas.
            </summary>
            <value>
                The texture atlas.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SpriteAtlas.TintColor">
            <summary>
            Gets or sets the color of the tint.
            </summary>
            <value>
            The color of the tint.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SpriteAtlas.TextureName">
            <summary>
                Gets or sets the name of the texture from where this atlas is loaded.
            </summary>
            <value>
                The name of the texture.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics2D.SpriteAtlas.TextureNames">
            <summary>
            Gets the texture names.
            </summary>
            <value>
            The texture names.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer">
            <summary>
            Renders a Image contained in a <see cref="T:WaveEngine.Components.Graphics2D.SpriteAtlas"/> on the screen.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.Transform2D">
            <summary>
            Transform of the <see cref="T:WaveEngine.Components.Graphics2D.SpriteAtlas"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.Sprite">
            <summary>
            <see cref="T:WaveEngine.Components.Graphics2D.SpriteAtlas"/> to render.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.scale">
            <summary>
            The scale
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.origin">
            <summary>
            The origin
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer"/> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable"/> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteAtlasRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.SpriteRenderer">
            <summary>
            Renders a <see cref="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Sprite"/> on the screen.
            The owner <see cref="T:WaveEngine.Framework.Entity"/> must contain the <see cref="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Sprite"/> to be drawn, plus a <see cref="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Transform2D"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteRenderer.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Transform2D">
            <summary>
            Required <see cref="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Transform2D"/>.
            It provides where to draw the <see cref="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Sprite"/>, which rotation to apply and which scale.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Sprite">
            <summary>
            Required <see cref="F:WaveEngine.Components.Graphics2D.SpriteRenderer.Sprite"/>.
            It provides the in memory representation for a visual asset.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteRenderer.position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteRenderer.scale">
            <summary>
            The scale
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.SpriteRenderer.origin">
            <summary>
            The origin
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.SpriteRenderer"/> class.
            </summary>
            <param name="layerType">
            Layer type (available at <see cref="T:WaveEngine.Framework.Graphics.DefaultLayers"/>).
            Example: new SpriteRenderer(DefaultLayers.Alpha)
            </param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable"/> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.SpriteRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.WaveTextureLoader">
            <summary>
            Loader for wpk textures
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.WaveTextureLoader.assets">
            <summary>
            The assets
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.WaveTextureLoader.#ctor(WaveEngine.Framework.Services.AssetsContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.WaveTextureLoader"/> class.
            </summary>
            <param name="assets">The assets.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.WaveTextureLoader.Load(WaveEngine.Components.Animation.Spine.AtlasPage,System.String)">
            <summary>
            Loads the specified page.
            </summary>
            <param name="page">The page.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.WaveTextureLoader.Unload(System.Object)">
            <summary>
            Unloads the specified texture.
            </summary>
            <param name="texture">The texture.</param>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.InternalStaticModel">
            <summary>
            Class that holds the data of a 3D model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalStaticModel.Meshes">
            <summary>
            Meshes that form the model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalStaticModel.Bones">
            <summary>
            Bones in the model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalStaticModel.MeshBonePairs">
            <summary>
            Relation between bones and pairs.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalStaticModel.BoundingBox">
            <summary>
            Bounding box of the model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalStaticModel.graphics">
            <summary>
            The graphicsDevice
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalStaticModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.InternalStaticModel"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalStaticModel.FromPrimitive(WaveEngine.Framework.Services.GraphicsDevice,WaveEngine.Components.Primitives.Geometric)">
            <summary>
            Loads this class with data from a primitive.
            </summary>
            <param name="graphicsDevice">The graphicsDevice device.</param>
            <param name="primitive">The primitive to load.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalStaticModel.Load(WaveEngine.Framework.Services.GraphicsDevice,System.IO.Stream)">
            <summary>
                Loads this class with data from a stream.
            </summary>
            <param name="graphicsDevice">The graphicsDevice device.</param>
            <param name="stream">The stream that contains the model data.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalStaticModel.Unload">
            <summary>
                Unloads the model data from memory.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.InternalStaticModel.AssetPath">
            <summary>
            Gets or sets the asset path from where this model is located.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.InternalStaticModel.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
            <value>
            The reader version.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.InternalSkinnedModel">
            <summary>
            Class that holds the data of an animated 3D model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalSkinnedModel.BoundingBox">
            <summary>
            Bounding box of the model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalSkinnedModel.BoundingBoxBoneIndex">
            <summary>
            Bounding box bone index.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalSkinnedModel.Meshes">
            <summary>
            Meshes that form the animated model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalSkinnedModel.graphics">
            <summary>
            The graphics
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.InternalSkinnedModel.internalindices">
            <summary>
            The internalindices
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalSkinnedModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.InternalSkinnedModel"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalSkinnedModel.Load(WaveEngine.Framework.Services.GraphicsDevice,System.IO.Stream)">
            <summary>
            Loads this class with data from a stream.
            </summary>
            <param name="graphicsDevice">The graphicsDevice device.</param>
            <param name="stream">The stream that contains the model data.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalSkinnedModel.Unload">
            <summary>
                Unloads the animated model data from memory.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.InternalSkinnedModel.Clone">
            <summary>
                Clones this instance.
            </summary>
            <returns>The cloned animated model data.</returns>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.InternalSkinnedModel.AssetPath">
            <summary>
            Gets or sets the asset path from where this model is located.
            </summary>
            <value>
            The asset path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.InternalSkinnedModel.ReaderVersion">
            <summary>
            Gets the reader version.
            </summary>
            <value>
            The reader version.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.MaterialsMap">
            <summary>
            A list of materials.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.MaterialsMap.instances">
            <summary>   
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.MaterialsMap.defaultTextureResourcePath">
            <summary>
            Internal path for the default texture resource.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.MaterialsMap.defaultTexture">
            <summary>
            Default texture in case we don't specify any materials.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.MaterialsMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.MaterialsMap"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.MaterialsMap.#ctor(System.Collections.Generic.Dictionary{System.String,WaveEngine.Framework.Graphics.Material})">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.MaterialsMap"/> class.
            </summary>
            <param name="materials">The materials.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.MaterialsMap.#ctor(WaveEngine.Framework.Graphics.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.MaterialsMap"/> class.
            </summary>
            <param name="material">Material applied to all meshes.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.MaterialsMap.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,WaveEngine.Framework.Graphics.Material})">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.MaterialsMap"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="materials">The materials.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.MaterialsMap.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.MaterialsMap.DefaultMaterial">
            <summary>
            Gets or sets the default material.
            </summary>
            <value>
            The default material.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.MaterialsMap.Materials">
            <summary>
            Gets the materials.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.Model">
            <summary>
            A 3D model. To render a model use the <see cref="T:WaveEngine.Components.Graphics3D.ModelRenderer"/> class.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.Model.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.Model.isPrimitive">
            <summary>
            The is primitive.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.Model"/> class.
            </summary>
            <param name="modelPath">The model path.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.Model"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="modelPath">The model path.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreateCube(System.Single)">
            <summary>
            Creates the cube.
            </summary>
            <param name="size">The size (1 by default).</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a cube.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreateSphere(System.Single,System.Int32)">
            <summary>
            Creates the sphere.
            </summary>
            <param name="diameter">The diameter (1 by default).</param>
            <param name="tessellation">The tessellation (8 by default).</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a sphere.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreatePlane(System.Nullable{WaveEngine.Common.Math.Vector3},System.Single)">
            <summary>
            Creates the plane.
            </summary>
            <param name="normal">The normal ( [0, 1, 0] by default).</param>
            <param name="size">The size (1 by default).</param>
            <returns>
            A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a plane.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreatePyramid(System.Single)">
            <summary>
            Creates the pyramid.
            </summary>
            <param name="size">The size (1 by default).</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a pyramid.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreateTorus(System.Single,System.Single,System.Int32)">
            <summary>
            Creates the torus.
            </summary>
            <param name="diameter">The diameter (1 by default).</param>
            <param name="thickness">The thickness (0.333f by default).</param>
            <param name="tessellation">The tessellation (16 by default).</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a torus</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreateCylinder(System.Single,System.Single,System.Int32)">
            <summary>
            Creates the cylinder.
            </summary>
            <param name="height">The height (1 by default).</param>
            <param name="diameter">The diameter (1 by default).</param>
            <param name="tessellation">The tessellation (16 by default).</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a cylinder.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreateCapsule(System.Single,System.Single,System.Int32)">
            <summary>
            Creates the capsule.
            </summary>
            <param name="height">The height (1 by default).</param>
            <param name="radius">The radius (0.5f by default).</param>
            <param name="tessellation">The tessellation (16 by default).</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a capsule.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreateCone(System.Single,System.Single,System.Int32)">
            <summary>
            Creates the cone.
            </summary>
            <param name="height">The height (1 by default).</param>
            <param name="diameter">The diameter (1 by default).</param>
            <param name="tessellation">The tessellation (16 by default).</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a cone.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.CreateTeapot(System.Single,System.Int32)">
            <summary>
            Creates the teapot.
            </summary>
            <param name="size">The size.</param>
            <param name="tessellation">The tessellation.</param>
            <returns>A <see cref="T:WaveEngine.Components.Graphics3D.Model"/> representing a teapot.</returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.GetVertices">
            <summary>
            Gets the collition info.
            </summary>
            <returns>
            Vertex array.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.GetIndices">
            <summary>
            The get indices
            </summary>
            <returns>
            Indices array
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Model.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.Model.MeshCount">
            <summary>
            Gets the number of meshes of this model.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.Model.InternalModel">
            <summary>
            Gets the model data.
            </summary>
            <value>
            The internal model.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Graphics2D.QuadRenderer">
            <summary>
            Drawable for spare quads.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.Transform2D">
            <summary>
            The entity transform.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.Material">
            <summary>
            The material
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.texcoord1">
            <summary>
            The texcoord1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.texcoord2">
            <summary>
            The texcoord2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.quadMesh">
            <summary>
            The quad mesh.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.viewportManager">
            <summary>
            The viewport manager cached
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.position">
            <summary>
            The position cached
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.scale">
            <summary>
            The scale cached
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.internalPosition">
            <summary>
            The internal position cached
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.internalScale">
            <summary>
            The internal scale cached
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.localWorld">
            <summary>
            The local world
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.quaternionMatrix">
            <summary>
            The quaternion matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.translationMatrix">
            <summary>
            The translation matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.scaleMatrix">
            <summary>
            The scale matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics2D.QuadRenderer.orientation">
            <summary>
            The orientation
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.QuadRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.QuadRenderer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.QuadRenderer.#ctor(WaveEngine.Common.Math.Vector2[],WaveEngine.Common.Math.Vector2[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics2D.QuadRenderer"/> class.
            </summary>
            <param name="texcoord1">The texcoord1.</param>
            <param name="texcoord2">The texcoord2.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.QuadRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable"/> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.QuadRenderer.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics2D.QuadRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.SkinnedModel">
            <summary>
            Class that holds the data of an animated 3D model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModel.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.SkinnedModel"/> class.
            </summary>
            <param name="modelPath">The model path.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModel.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.SkinnedModel"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="modelPath">The model path.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModel.GetVertices">
            <summary>
            Gets the collition info.
            </summary>
            <returns>
            Vertex array.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModel.GetIndices">
            <summary>
            The get indices
            </summary>
            <returns>
            Indices array
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModel.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModel.MeshCount">
            <summary>
            Gets the number of meshes of this model.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModel.InternalModel">
            <summary>
            Gets the model data.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Animation.StripAnimation">
            <summary>
            A Sprite animation where each sequence of the animation is a different Image.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.StripAnimation.numFrames">
            <summary>
            The num frames
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.StripAnimation.frames">
            <summary>
            The frames
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.StripAnimation.frameLength">
            <summary>
            The frame length
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.StripAnimation.timer">
            <summary>
            The timer
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.StripAnimation.currentFrame">
            <summary>
            The current frame
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.StripAnimation.frameWidth">
            <summary>
            The frame width
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.StripAnimation.frameHeight">
            <summary>
            The frame height
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Animation.StripAnimation.backwards">
            <summary>
            Whether the animation goes backwards.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Animation.StripAnimation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.StripAnimation"/> class.
            </summary>
            <param name="width">The width of the animation.</param>
            <param name="height">The height of the animation.</param>
            <param name="frameWidth">Width of each frame.</param>
            <param name="frameHeight">Height of each frame.</param>
            <param name="numFrames">The number of frames.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.StripAnimation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.StripAnimation"/> class.
            </summary>
            <param name="width">The width of the animation.</param>
            <param name="height">The height of the animation.</param>
            <param name="frameWidth">Width of each frame.</param>
            <param name="frameHeight">Height of each frame.</param>
            <param name="numFrames">The number frames.</param>
            <param name="xOffset">The x offset of each frame inside the Image.</param>
            <param name="yOffset">The y offset of each frame inside the Image.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.StripAnimation.#ctor(WaveEngine.Common.Math.Rectangle[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Animation.StripAnimation"/> class starting from a collection of frames.
            </summary>
            <param name="frames">Array of <see cref="T:WaveEngine.Common.Math.Rectangle"/> concerning every frames sequence.</param>
            <param name="framesPerSecond">Frames per second.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.StripAnimation.Update(System.TimeSpan)">
            <summary>
            Updates the animation.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Animation.StripAnimation.Reset">
            <summary>
            Resets the animation.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.StripAnimation.NumFrames">
            <summary>
            Gets or sets the number of frames of the animation.
            </summary>
            <value>
            The num frames.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.StripAnimation.CurrentFrame">
            <summary>
            Gets the current frame of the animation.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Animation.StripAnimation.CurrentFrameIndex">
            <summary>
            Gets or sets the current frame.
            </summary>
            <value>
            The current frame.
            </value>
            <remarks>Invalid values are clamped to a valid one.</remarks>
        </member>
        <member name="P:WaveEngine.Components.Animation.StripAnimation.FramesPerSecond">
            <summary>
            Gets or sets the speed of the animation.
            </summary>
            <value>
            The speed of the animation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.StripAnimation.Height">
            <summary>
            Gets or sets the height of the animation.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.StripAnimation.Width">
            <summary>
            Gets or sets the width of the animation.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.StripAnimation.FrameWidth">
            <summary>
            Gets the width of each frame.
            </summary>
            <value>
            The width of each frame.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.StripAnimation.FrameHeight">
            <summary>
            Gets the height of each frame.
            </summary>
            <value>
            The height of each frame.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Animation.StripAnimation.Backwards">
            <summary>
            Gets or sets a value indicating whether the animation goes backwards.
            </summary>
            <value>Whether the animation goes backwards.</value>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.Spinner">
            <summary>
            Spins a model around an imaginary axis.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.Spinner.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.Spinner.Transform">
            <summary>
            The transform of the model to spin.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.Spinner.angle">
            <summary>
            The angle
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.Spinner.increase">
            <summary>
            The increase
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Spinner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.Spinner"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.Spinner.Update(System.TimeSpan)">
            <summary>
            Updates the transform of the model so it rotates along the defined axis.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.Spinner.AxisTotalIncreases">
            <summary>
            Gets or sets the axis increase.
            </summary>
            <value>
            The axis increase.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.Spinner.IncreaseX">
            <summary>
            Gets or sets the increase in X.
            </summary>
            <value>
            The increase in X.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.Spinner.IncreaseY">
            <summary>
            Gets or sets the increase in Y.
            </summary>
            <value>
            The increase in Y.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.Spinner.IncreaseZ">
            <summary>
            Gets or sets the increase in Z.
            </summary>
            <value>
            The increase in Z.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem2D">
            <summary>
            Particle system class.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.MAXPARTICLES">
            <summary>
            Max number of particles.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.instances">
            <summary>
                Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.RandomVelocity">
            <summary>
            How much random velocity to give each particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.Gravity">
            <summary>
            Direction and strength of the gravity effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.EmitRate">
            <summary>
            Particles emitted per second.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.EmitterShape">
            <summary>
                Emiter shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.LocalVelocity">
            <summary>
                How much X and Y axis velocity to give each particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.MaxColor">
            <summary>
            The max color.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.MaxLife">
            <summary>
            The max life.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.InterpolationColors">
            <summary>
                Range of color for particle life.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.MinColor">
            <summary>
                Range of values controlling the particle color and alpha.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.MinLife">
            <summary>
                How long these particles will last.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.EmitterSize">
            <summary>
                Size of emiter.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.endDeltaScale">
            <summary>
            The end delta scale.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.numParticles">
            <summary>
                Maximun number of particles that can be displayed at one time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.textureName">
            <summary>
            Name of the texture used by this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.CollisionType">
            <summary>
            If collisions are enabled.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.CollisionBehavior">
            <summary>
            Behavior of the particles when collide.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.Bounciness">
            <summary>
            Responsiveness to bouncing when collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.CollisionBottom">
            <summary>
            Y Collision Bottom.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.CollisionTop">
            <summary>
            Y Collision Top.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.CollisionLeft">
            <summary>
            X Collision Left.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.CollisionRight">
            <summary>
            X Collision Right.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.CollisionSpread">
            <summary>
            Spread of a particle velocity when collides.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Particles.ParticleSystem2D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Particles.ParticleSystem2D"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Particles.ParticleSystem2D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Particles.ParticleSystem2D"/> class.
            </summary>
            <param name="name">name of the instance</param>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.AlphaEnabled">
            <summary>
                Gets or sets a value indicating whether alpha is enabled.
            </summary>
            <value>
                <c>true</c> if alpha is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.Emit">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:WaveEngine.Components.Particles.ParticleSystem3D"/> is enabled.
            </summary>
            <value>
                <c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.EndDeltaScale">
            <summary>
                Gets or sets the end delta scale.
            </summary>
            <value>
                The end delta scale.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.InitialAngle">
            <summary>
                Gets or sets the initial angle of the particles.
            </summary>
            <value>
                The initial angle of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.InitialAngleVariation">
            <summary>
                Gets or sets the variation of the initial angle of the particles.
            </summary>
            <value>
                The variation of the initial angle of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.LinearColorEnabled">
            <summary>
                Gets or sets a value indicating whether linear color interpolation is enabled.
            </summary>
            <value>
                <c>true</c> if linear color interpolation is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.MaxRotateSpeed">
            <summary>
            Gets or sets the maximum rotation speed of the particles.
            </summary>
            <value>
            The maximum rotation speed of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.MaxSize">
            <summary>
                Gets or sets the maximum size of the particles.
            </summary>
            <value>
                The maximum size of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.MinRotateSpeed">
            <summary>
                Gets or sets the minimum rotation speed of the particles.
            </summary>
            <value>
                The minimum rotation speed of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.MinSize">
            <summary>
                Gets or sets the minimum size of the particles.
            </summary>
            <value>
                The minimum size of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.SortEnabled">
            <summary>
            Gets or sets a value indicating whether the particles must be drawed in creation order.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.NumParticles">
            <summary>
                Gets or sets the number of particles.
            </summary>
            <value>
                The num particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem2D.TextureName">
            <summary>
            Gets or sets the name of the texture used for the particles.
            </summary>
            <value>
            The name of the texture used for the particles.
            </value>
            <exception cref="T:System.InvalidOperationException">TextureName can not be Empty</exception>
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem2D.Shape">
            <summary>
                Shape of the particles.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.Shape.Rectangle">
            <summary>
                Rectangle shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.Shape.FillRectangle">
            <summary>
                Fill rectangle shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.Shape.Circle">
            <summary>
                Circle shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.Shape.FillCircle">
            <summary>
                Fill circle shape.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionBehavior">
            <summary>
            Behavior of a particle when collides
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionBehavior.Die">
            <summary>
            The particle dies
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionBehavior.Bounce">
            <summary>
            The particle bounces
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionFlags">
            <summary>
            Flags of collision
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionFlags.None">
            <summary>
            No collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionFlags.Bottom">
            <summary>
            Bottom collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionFlags.Top">
            <summary>
            Top Collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionFlags.Left">
            <summary>
            Left collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem2D.ParticleCollisionFlags.Right">
            <summary>
            Right collision.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Teapot">
            <summary>
            Util for create teapot primitives.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Geometric">
            <summary>
            Base class for geometric primitives.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Primitives.Geometric.vertices">
            <summary>
            During the process of constructing a primitive model, vertex data is stored on the CPU in these managed lists.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Primitives.Geometric.indices">
            <summary>
            During the process of constructing a primitive model, index data is stored on the CPU in these managed lists.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Geometric"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:WaveEngine.Components.Primitives.Geometric"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.AddVertex(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Adds a new vertex to the primitive model.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <remarks>
            This should only be called during the initialization process, 
            before InitializePrimitive.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.AddVertex(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector2)">
            <summary>
            Adds a new vertex to the primitive model.
            </summary>
            <param name="position">The position.</param>
            <param name="normal">The normal.</param>
            <param name="texcoord">The texture coordinate.</param>
            <remarks>
            This should only be called during the initialization process, 
            before InitializePrimitive.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.AddIndex(System.Int32)">
            <summary>
            Adds a new index to the primitive model.
            </summary>
            <param name="index">The index.</param>
            <remarks>
            This should only be called during the initialization process, 
            before InitializePrimitive.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.GetSphericalTexCoord(WaveEngine.Common.Math.Vector3)">
            <summary>
            Gets the spherical texture coordinates.
            </summary>
            <param name="normal">The normal.</param>
            <returns>Spherical coordinates.</returns>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Geometric.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:WaveEngine.Components.Primitives.Geometric.VerticesCount">
            <summary>
            Gets the vertices count.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Primitives.Geometric.IndicesCount">
            <summary>
            Gets the indices count.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Primitives.Geometric.Vertices">
            <summary>
            Gets the vertices.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Primitives.Geometric.ByteVertices">
            <summary>
            Gets the vertices as a byte array.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Primitives.Geometric.Indices">
            <summary>
            Gets the indices.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Teapot"/> class.
            </summary>
            <param name="size">The size (1 by default).</param>
            <param name="tessellation">The tessellation (8 by default).</param>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.TessellatePatch(WaveEngine.Components.Primitives.Teapot.TeapotPatch,System.Int32,WaveEngine.Common.Math.Vector3)">
            <summary>
            Tessellates the specified bezier patch.
            </summary>
            <param name="patch">The patch.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.CreatePatchIndices(System.Int32,System.Boolean)">
            <summary>
            Creates indices for a patch that is tessellated at the specified level.
            </summary>
            <param name="tessellation">The tessellation.</param>
            <param name="isMirrored">if set to <c>true</c> [is mirrored].</param>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.CreatePatchVertices(WaveEngine.Common.Math.Vector3[],System.Int32,System.Boolean)">
            <summary>
            Creates vertices for a patch that is tessellated at the specified level.
            </summary>
            <param name="patch">The patch.</param>
            <param name="tessellation">The tessellation.</param>
            <param name="isMirrored">if set to <c>true</c> [is mirrored].</param>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.Bezier(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a cubic bezier interpolation between four scalar control
            points, returning the value at the specified time (t ranges 0 to 1).
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="t">The t.</param>
            <returns>Float result.</returns>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.Bezier(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Performs a cubic bezier interpolation between four Vector3 control
            points, returning the value at the specified time (t ranges 0 to 1).
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="t">The t.</param>
            <returns>Vector3 result.</returns>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.BezierTangent(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Computes the tangent of a cubic bezier curve at the specified time,
            when given four scalar control points.
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="t">The t.</param>
            <returns>float result.</returns>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.BezierTangent(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Computes the tangent of a cubic bezier curve at the specified time,
            when given four Vector3 control points. This is used for calculating
            normals (by crossing the horizontal and vertical tangent vectors).
            </summary>
            <param name="p1">The p1.</param>
            <param name="p2">The p2.</param>
            <param name="p3">The p3.</param>
            <param name="p4">The p4.</param>
            <param name="t">The t.</param>
            <returns>Vector3 result.</returns>
        </member>
        <member name="F:WaveEngine.Components.Primitives.Teapot.teapotPatches">
            <summary>
            Static data array defines the bezier patches that make up the teapot.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Primitives.Teapot.teapotControlPoints">
            <summary>
            Static array defines the control point positions that make up the teapot.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Teapot.TeapotPatch">
            <summary>
            The teapot model consiste of 10 bezier patches. Each path has 16 controls points
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Primitives.Teapot.TeapotPatch.Indices">
            <summary>
            All control points are stored as integers.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Primitives.Teapot.TeapotPatch.MirrorZ">
            <summary>
            A teapot is symmetrical we use it for draw the other side.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Teapot.TeapotPatch.#ctor(System.Boolean,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Teapot.TeapotPatch"/> class.
            </summary>
            <param name="mirrorZ">if set to <c>true</c> [mirror Z].</param>
            <param name="indices">The indices.</param>
        </member>
        <member name="T:WaveEngine.Components.Resources.StaticResources">
            <summary>
            Access to Embebed resources
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Resources.StaticResources.defaultFontResourcePath">
            <summary>
            Default font path (embebed resource)
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Resources.StaticResources.defaultSpriteFont">
            <summary>
            The default sprite font
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Resources.StaticResources.DefaultSpriteFont">
            <summary>
            Gets the default sprite font.
            </summary>
            <value>
            The default sprite font.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Transitions.ChequeredAppearTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ChequeredAppearTransition.segments">
            <summary>
            Gets or sets the segments.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ChequeredAppearTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ChequeredAppearTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ChequeredAppearTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ChequeredAppearTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.ChequeredAppearTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ChequeredAppearTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ChequeredAppearTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ChequeredAppearTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ChequeredAppearTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:WaveEngine.Components.Transitions.ChequeredAppearTransition.Segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <exception cref="T:System.ArgumentException">Out of range, segments &gt;= 4</exception>
        </member>
        <member name="T:WaveEngine.Components.Transitions.ColorFadeTransition">
            <summary>
            This class make an effect between two <see cref="T:WaveEngine.Components.Transitions.ColorFadeTransition"/> pasing first to a specified color (white for example)
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ColorFadeTransition.transitionColor">
            <summary>
            The transition color
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ColorFadeTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ColorFadeTransition.transitionColorTexture">
            <summary>
            The transition color texture
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ColorFadeTransition.renderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ColorFadeTransition.#ctor(WaveEngine.Common.Graphics.Color,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.ColorFadeTransition"/> class.
            </summary>
            <param name="transitionColor">The transition color.</param>
            <param name="duration">The transition duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ColorFadeTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ColorFadeTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ColorFadeTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ColorFadeTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.CombTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <value>
            The segments.
            </value>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.effectOption">
            <summary>
            The transition options
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.position1">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.position2">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.initialPosition">
            <summary>
            The initial position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.targetPosition">
            <summary>
            The target direction
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CombTransition.#ctor(System.TimeSpan,WaveEngine.Components.Transitions.CombTransition.EffectOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.CombTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CombTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CombTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CombTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CombTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:WaveEngine.Components.Transitions.CombTransition.Segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <exception cref="T:System.ArgumentException">Out of range, segments &gt;= 3</exception>
        </member>
        <member name="T:WaveEngine.Components.Transitions.CombTransition.EffectOptions">
            <summary>
            The direction of this effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.EffectOptions.Horizontal">
            <summary>
            The horizontal
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CombTransition.EffectOptions.Vertical">
            <summary>
            The vertical
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Transitions.RotateTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.RotateTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.RotateTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.RotateTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.RotateTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.RotateTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.RotateTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.RotateTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.RotateTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.RotateTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.FanTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.FanTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.FanTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.FanTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FanTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.FanTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FanTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FanTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FanTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FanTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.DoorwayTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.DoorwayTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.DoorwayTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.DoorwayTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DoorwayTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.DoorwayTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DoorwayTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DoorwayTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DoorwayTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.DoorwayTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.FallingLinesTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.FallingLinesTransition.segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <value>
            The segments.
            </value>
        </member>
        <member name="F:WaveEngine.Components.Transitions.FallingLinesTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.FallingLinesTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.FallingLinesTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FallingLinesTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.FallingLinesTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FallingLinesTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FallingLinesTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FallingLinesTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.FallingLinesTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:WaveEngine.Components.Transitions.FallingLinesTransition.Segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <exception cref="T:System.ArgumentException">Out of range, segments &gt;= 3</exception>
        </member>
        <member name="T:WaveEngine.Components.Transitions.CoverTransition">
            <summary>
            Transition effect where the next screenContext cover the current screenContext
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.effectOption">
            <summary>
            The transition options
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.initialPosition">
            <summary>
            The initial position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.targetPosition">
            <summary>
            The target direction
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CoverTransition.#ctor(System.TimeSpan,WaveEngine.Components.Transitions.CoverTransition.EffectOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.CoverTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CoverTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CoverTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CoverTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CoverTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.CoverTransition.EffectOptions">
            <summary>
            The direction of this effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromRight">
            <summary>
            From right
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromTop">
            <summary>
            From top
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromLeft">
            <summary>
            From left
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromBotton">
            <summary>
            From botton
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromTopRight">
            <summary>
            From top right
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromBottomRight">
            <summary>
            From bottom right
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromTopLeft">
            <summary>
            From top left
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CoverTransition.EffectOptions.FromBottonLeft">
            <summary>
            From botton left
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Transitions.CrossFadeTransition">
            <summary>
            This class make an effect between two <see cref="T:WaveEngine.Components.Transitions.ColorFadeTransition"/> pasing first to a specified color (white for example)
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CrossFadeTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CrossFadeTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CrossFadeTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CrossFadeTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.CrossFadeTransition"/> class.
            </summary>
            <param name="duration">The transition duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CrossFadeTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CrossFadeTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CrossFadeTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CrossFadeTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.CurtainsTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CurtainsTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CurtainsTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.CurtainsTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CurtainsTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.CurtainsTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CurtainsTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CurtainsTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CurtainsTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.CurtainsTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.PushTransition">
            <summary>
            Transition effect where the next screenContext cover the current screenContext
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.effectOption">
            <summary>
            The transition options
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.position1">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.position2">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.initialPosition">
            <summary>
            The initial position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.targetPosition">
            <summary>
            The target direction
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.PushTransition.#ctor(System.TimeSpan,WaveEngine.Components.Transitions.PushTransition.EffectOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.PushTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.PushTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.PushTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.PushTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.PushTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.PushTransition.EffectOptions">
            <summary>
            The direction of this effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.EffectOptions.FromRight">
            <summary>
            From right
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.EffectOptions.FromTop">
            <summary>
            From top
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.EffectOptions.FromLeft">
            <summary>
            From left
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.PushTransition.EffectOptions.FromBotton">
            <summary>
            From botton
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Transitions.ScaleTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ScaleTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ScaleTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ScaleTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ScaleTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.ScaleTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ScaleTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ScaleTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ScaleTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ScaleTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.ShrinkAndSpinTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.ShrinkAndSpinTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ShrinkAndSpinTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.SpinningSquaresTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.SpinningSquaresTransition.segments">
            <summary>
            Gets or sets the segments.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.SpinningSquaresTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.SpinningSquaresTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.SpinningSquaresTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.SpinningSquaresTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.SpinningSquaresTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.SpinningSquaresTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.SpinningSquaresTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.SpinningSquaresTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.SpinningSquaresTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:WaveEngine.Components.Transitions.SpinningSquaresTransition.Segments">
            <summary>
            Gets or sets the segments.
            </summary>
            <exception cref="T:System.ArgumentException">Out of range, segments &gt;= 4</exception>
        </member>
        <member name="T:WaveEngine.Components.Transitions.UncoverTransition">
            <summary>
            Transition effect where the next screenContext cover the current screenContext
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.effectOption">
            <summary>
            The transition options
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.initialPosition">
            <summary>
            The initial position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.targetPosition">
            <summary>
            The target direction
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.UncoverTransition.#ctor(System.TimeSpan,WaveEngine.Components.Transitions.UncoverTransition.EffectOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.UncoverTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.UncoverTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.UncoverTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.UncoverTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.UncoverTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions">
            <summary>
            The direction of this effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromRight">
            <summary>
            From right
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromTop">
            <summary>
            From top
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromLeft">
            <summary>
            From left
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromBotton">
            <summary>
            From botton
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromTopRight">
            <summary>
            From top right
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromBottomRight">
            <summary>
            From bottom right
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromTopLeft">
            <summary>
            From top left
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.UncoverTransition.EffectOptions.FromBottonLeft">
            <summary>
            From botton left
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Transitions.ZoomTransition">
            <summary>
            Transition effect where each square of the image appears at a different time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ZoomTransition.spriteBatch">
            <summary>
            The sprite batch
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ZoomTransition.sourceRenderTarget">
            <summary>
            Source transition renderTarget
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Transitions.ZoomTransition.targetRenderTarget">
            <summary>
            Target transition renderTarget
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ZoomTransition.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Transitions.ZoomTransition"/> class.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ZoomTransition.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ZoomTransition.Update(System.TimeSpan)">
            <summary>
            Updates the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ZoomTransition.Draw(System.TimeSpan)">
            <summary>
            Draws the specified game time.
            </summary>
            <param name="gameTime">The game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Transitions.ZoomTransition.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.BorderRenderer">
            <summary>
            Draw a simple border over controls
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.BorderRenderer.Transform2D">
            <summary>
            The transform2D
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.BorderRenderer.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.BorderRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.BorderRenderer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.BorderRenderer.#ctor(WaveEngine.Common.Graphics.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.BorderRenderer"/> class.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.BorderRenderer.#ctor(System.String,System.Type,WaveEngine.Common.Graphics.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.BorderRenderer"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="layerType">Type of the layer.</param>
            <param name="color">The color.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.BorderRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable"/> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.BorderRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:WaveEngine.Components.UI.BorderRenderer.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.Button">
            <summary>
            Button decorate class
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.UIBase">
            <summary>
            UI decorator base class
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.UIBase.SetValue(WaveEngine.Framework.DependencyProperty,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="dp">The dp.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.UIBase.GetValue(WaveEngine.Framework.DependencyProperty)">
            <summary>
            Gets the value.
            </summary>
            <param name="dp">The dp.</param>
            <returns>DependencyProperty value</returns>
        </member>
        <member name="M:WaveEngine.Components.UI.UIBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.UIBase.IsBorder">
            <summary>
            Gets or sets a value indicating whether this instance is border.
            </summary>
            <value>
              <c>true</c> if this instance is border; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.UIBase.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
            <value>
            The color of the border.
            </value>
            <exception cref="T:System.InvalidOperationException">There isn't Border component. You must set Border=true</exception>
        </member>
        <member name="P:WaveEngine.Components.UI.UIBase.DrawOrder">
            <summary>
            Gets or sets the element draw order.
            </summary>
            <value>
            The element draw order [0-1].
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.UIBase.Opacity">
            <summary>
            Gets or sets the opacity.
            </summary>
            <value>
            The opacity property [0-Transparent 1-Opaque].
            </value>
            <exception cref="T:System.InvalidOperationException">There isn't Transform2D component.</exception>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.DefaultWidth">
            <summary>
            The default width
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.DefaultHeight">
            <summary>
            The default height
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.defaultMargin">
            <summary>
            The default margin
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.pressedBackgroundImage">
            <summary>
            Path to the background image showed when the button is being pressed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.backgroundImage">
            <summary>
            Path to the default background image.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.backToBackgroundImage">
            <summary>
            Indicates whether back to render the default background image on the released event.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.sizeDefineByUser">
            <summary>
            The size define by user
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Button.backgroundIsColor">
            <summary>
            The button background is a color, not an image
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Button"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.Button.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Button"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Button.Entity_EntityInitialized(System.Object,System.EventArgs)">
            <summary>
            Handles the EntityInitialized event of the entity control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Button.TouchGestures_TouchReleased(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchReleased event of the Button control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Button.TouchGestures_TouchPressed(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            If a pressed background image is set, it draws this last one instead of background image,
            just up to the released event is catched.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Button.ChangeBackgroundImage(System.String)">
            <summary>
            Modifies the background image with the new asset path.
            </summary>
            <param name="imagePath">Path to the background image</param>
        </member>
        <member name="E:WaveEngine.Components.UI.Button.Click">
            <summary>
            Occurs when [click].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.FontPath">
            <summary>
            Sets the font.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.HorizontalTextAlignment">
            <summary>
            Gets or sets the horizontal text alignment.
            </summary>
            <value>
            The horizontal text alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.VerticalTextAlignment">
            <summary>
            Gets or sets the vertical text alignment.
            </summary>
            <value>
            The vertical text alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.BackgroundImage">
            <summary>
            Sets the background image.
            </summary>
            <value>
            The background image.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.PressedBackgroundImage">
            <summary>
            Sets the pressed background image.
            </summary>
            <value>
            The pressed background image.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Button.BackgroundColor">
            <summary>
            Sets the color of the background.
            </summary>
            <value>
            The color of the background.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.ButtonBehavior">
            <summary>
            The ButtonBehavior class.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.FocusBehavior">
            <summary>
            Focused behavior
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.FocusBehavior.CurrentFocus">
            <summary>
            The current focus behavior
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.FocusBehavior.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.FocusBehavior"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.FocusBehavior.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.FocusBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component"/>, or the <see cref="T:WaveEngine.Framework.Entity"/>
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="E:WaveEngine.Components.UI.FocusBehavior.GotFocus">
            <summary>
            Occurs when [got focus].
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.FocusBehavior.LostFocus">
            <summary>
            Occurs when [lost focus].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.FocusBehavior.IsFocus">
            <summary>
            Gets or sets a value indicating whether this instance is focus.
            </summary>
            <value>
              <c>true</c> if this instance is focus; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:WaveEngine.Components.UI.ButtonBehavior.Transform">
            <summary>
            The transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ButtonBehavior.Gestures">
            <summary>
            The gestures
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ButtonBehavior.Animation">
            <summary>
            The animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ButtonBehavior.fadeIn">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ButtonBehavior.fadeOut">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ButtonBehavior.textEntity">
            <summary>
            The text entity
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ButtonBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ButtonBehavior"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ButtonBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ButtonBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.ButtonBehavior.Gestures_TouchPressed(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchPressed event of the gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ButtonBehavior.Gestures_TouchReleased(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchReleased event of the gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ButtonBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component" />, or the <see cref="T:WaveEngine.Framework.Entity" />
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.CheckBox">
            <summary>
            ChekcBox decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.DefaultUncheckedImage">
            <summary>
            The default unchecked image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.DefaultCheckedImage">
            <summary>
            The default checked image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.DefaultMargin">
            <summary>
            The default margin
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.DefaultCheckedImageMargin">
            <summary>
            The default checked image margin
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.checkBoxBehavior">
            <summary>
            The check box behavior
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.gridPanel">
            <summary>
            The grid panel
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.textControl">
            <summary>
            The text control
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.imageChecked">
            <summary>
            The image checked
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBox.imageUnchecked">
            <summary>
            The image unchecked
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.CheckBox"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.CheckBox"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBox.CheckBox_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CheckedChanged event of the CheckBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBox.TextControl_OnWidthChanged(System.Object,System.Single)">
            <summary>
            Texts the control_ on width changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="newWidth">The new width.</param>
        </member>
        <member name="E:WaveEngine.Components.UI.CheckBox.Checked">
            <summary>
            Occurs when [Checked].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.IsChecked">
            <summary>
            Gets or sets a value indicating whether this instance is checked.
            </summary>
            <value>
            <c>true</c> if this instance is checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.FontPath">
            <summary>
            Sets the font.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.HorizontalTextAlignment">
            <summary>
            Gets or sets the horizontal text alignment.
            </summary>
            <value>
            The horizontal text alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBox.VerticalTextAlignment">
            <summary>
            Gets or sets the vertical text alignment.
            </summary>
            <value>
            The vertical text alignment.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.ColumnDefinition">
            <summary>
            This class represent a grid column.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.ColumnDefinition.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ColumnDefinition.ActualWidth">
            <summary>
            Gets the actual width.
            </summary>
            <value>
            The actual width.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.Grid">
            <summary>
            Grid decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Grid.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.Grid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Grid"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.Grid.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Grid"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Grid.Add(WaveEngine.Components.UI.UIBase)">
            <summary>
            Adds the specified UI.
            </summary>
            <param name="ui">The UI.</param>
            <exception cref="T:System.ArgumentNullException">UI component is null.</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.Grid.Remove(WaveEngine.Components.UI.UIBase)">
            <summary>
            Removes the specified UI.
            </summary>
            <param name="ui">The UI.</param>
            <exception cref="T:System.ArgumentNullException">UI component is null.</exception>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.RowDefinitions">
            <summary>
            Gets the row definitions.
            </summary>
            <value>
            The row definitions.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.ColumnDefinitions">
            <summary>
            Gets the column definitions.
            </summary>
            <value>
            The column definitions.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Grid.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>
            The color of the background.
            </value>
            <exception cref="T:System.Exception">This panel haven't background assigned</exception>
        </member>
        <member name="T:WaveEngine.Components.UI.GridControl">
            <summary>
            The grid panel.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridControl.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridControl.data">
            <summary>
            The data
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridControl.RowProperty">
            <summary>
            The row property
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridControl.ColumnProperty">
            <summary>
            The column property
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridControl.RowSpanProperty">
            <summary>
            The row span property
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridControl.ColumnSpanProperty">
            <summary>
            The column span property
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.GridControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.GridControl"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.GridControl.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.GridControl"/> class.
            </summary>
            <param name="width">The initial width.</param>
            <param name="height">The initial height.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.GridControl.Measure(WaveEngine.Common.Math.Vector2)">
            <summary>
            Measures the specified available size.
            </summary>
            <param name="availableSize">Size of the available.</param>
            <returns>
            Size result.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.UI.GridControl.Arrange(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Arranges the specified final size.
            </summary>
            <param name="finalSize">The final size.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.GridControl.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:WaveEngine.Components.UI.GridControl.ColumnDefinitions">
            <summary>
            Gets the column definitions.
            </summary>
            <value>
            The column definitions.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.GridControl.RowDefinitions">
            <summary>
            Gets the row definitions.
            </summary>
            <value>
            The row definitions.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.GridControl.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.GridControl.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.GridLength">
            <summary>
            This class represent the grid size.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridLength.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridLength.type">
            <summary>
            The type
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.GridLength.#ctor(System.Single,WaveEngine.Components.UI.GridUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.GridLength"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <exception cref="T:System.ArgumentException">Invalid Parameter No NaN</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.GridLength.op_Equality(WaveEngine.Components.UI.GridLength,WaveEngine.Components.UI.GridLength)">
            <summary>
            Iqual operator of GridLength struct.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:WaveEngine.Components.UI.GridLength.op_Inequality(WaveEngine.Components.UI.GridLength,WaveEngine.Components.UI.GridLength)">
            <summary>
            != operator of GridLength struct.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:WaveEngine.Components.UI.GridLength.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="o">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.UI.GridLength.Equals(WaveEngine.Components.UI.GridLength)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns>Operation result.</returns>
        </member>
        <member name="M:WaveEngine.Components.UI.GridLength.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:WaveEngine.Components.UI.GridLength.IsAuto">
            <summary>
            Gets a value indicating whether this instance is auto.
            </summary>
            <value>
              <c>true</c> if this instance is auto; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.GridLength.IsPixel">
            <summary>
            Gets a value indicating whether this instance is pixel.
            </summary>
            <value>
              <c>true</c> if this instance is pixel; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.GridLength.IsProportional">
            <summary>
            Gets a value indicating whether this instance is proportional.
            </summary>
            <value>
            <c>true</c> if this instance is proportional; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.GridLength.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.GridRenderer">
            <summary>
            The Grid renderer.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridRenderer.instances">
            <summary>
            Total number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridRenderer.Transform2D">
            <summary>
            The transform2D
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridRenderer.Grid">
            <summary>
            The grid
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.GridRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.GridRenderer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.GridRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.GridRenderer"/> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.GridRenderer.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.GridRenderer"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.GridRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The entity passes the culling test.</description>
            </item>
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable"/> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.GridRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.GridRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines /&gt;
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.GridUnitType">
            <summary>
            Describes the kind of value that a GridLength object is holding.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridUnitType.Auto">
            <summary>
            The size is determined by the size properties of the content object.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridUnitType.Pixel">
            <summary>
            The value is expressed as a pixel.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.GridUnitType.Proportional">
            <summary>
            The value is expressed as a weighted proportion of available space.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.Image">
            <summary>
            Image decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Image.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Image.sizeDefineByUser">
            <summary>
            The size define by user
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.Image.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Image"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Image.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Image"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Image.Entity_EntityInitialized(System.Object,System.EventArgs)">
            <summary>
            Handles the EntityInitialized event of the entity control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Image.#ctor(System.String,WaveEngine.Common.Graphics.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Image"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="texture">Image texture.</param>
        </member>
        <member name="P:WaveEngine.Components.UI.Image.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Image.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Image.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Image.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Image.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Image.Source">
            <summary>
            Sets the image path.
            </summary>
            <value>
            The image path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Image.Stretch">
            <summary>
            Gets or sets the stretch.
            </summary>
            <value>
            The stretch.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.Stretch">
            <summary>
            Stretch for UI Image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Stretch.None">
            <summary>
            The image is not stretched to fill the output area. If the image is larger 
            than the output area, the image is drawn to the output area, clipping what 
            does not fit.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Stretch.Fill">
            <summary>
            The image is scaled to fit the output area. Because the image height and width 
            are scaled independently, the original aspect ratio of the image might not be 
            preserved. That is, the image might be warped in order to completely fill the 
            output container.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Stretch.Uniform">
            <summary>
            The image is scaled so that it fits completely within the output area. The 
            image's aspect ratio is preserved.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Stretch.UniformToFill">
            <summary>
            The image is scaled so that it completely fills the output area while preserving 
            the image's original aspect ratio.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.Orientation">
            <summary>
            The orientation.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Orientation.Vertical">
            <summary>
            The vertical.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Orientation.Horizontal">
            <summary>
            The horizontal.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.RowDefinition">
            <summary>
            Defines row-specific properties that apply to Grid elements.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.RowDefinition.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RowDefinition.ActualHeight">
            <summary>
            Gets the actual height.
            </summary>
            <value>
            The actual height.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.PanelControl">
            <summary>
            Simple panel as a grid with one row and one column
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.PanelControl.instances">
            <summary> 
            Total number of instances. 
            </summary> 
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.PanelControl"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControl.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.PanelControl"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControl.Arrange(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Arranges the specified final size.
            </summary>
            <param name="finalSize">The final size.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControl.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.PanelControlRenderer">
            <summary>
            The Panel renderer
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.PanelControlRenderer.instances">
            <summary>
            Total number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.PanelControlRenderer.Transform2D">
            <summary>
            The transform2D
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControlRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.PanelControlRenderer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControlRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.PanelControlRenderer"/> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControlRenderer.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.PanelControlRenderer"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControlRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The entity passes the culling test.</description>
            </item>
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable"/> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControlRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.PanelControlRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines /&gt;
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.ProgressBar">
            <summary>
            Progress bar decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBar.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ProgressBar"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBar.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ProgressBar"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBar.ProgressBar_ValueChanged(System.Object,WaveEngine.Components.UI.ChangedEventArgs)">
            <summary>
            Handles the ValueChanged event of the ProgressBar control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.UI.ChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:WaveEngine.Components.UI.ProgressBar.ValueChanged">
            <summary>
            Occurs when [value changed].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBar.Background">
            <summary>
            Gets or sets the background.
            </summary>
            <value>
            The background.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.ProgressBarBehavior">
            <summary>
            The ProgressBar behavior
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.DefaultProgressBarWeight">
            <summary>
            The default unchecked image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.Panel">
            <summary>
            The panel
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.Gestures">
            <summary>
            The gestures
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.foregroundImage">
            <summary>
            The foreground image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.foregroundTransform">
            <summary>
            The foreground transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.backgroundImage">
            <summary>
            The background image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.maximum">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.minimum">
            <summary>
            The minimum value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.value">
            <summary>
            The current value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.animation">
            <summary>
            The animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.move">
            <summary>
            The move
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.duration">
            <summary>
            The duration
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ProgressBarBehavior.difference">
            <summary>
            The cached difference between maximun and minimun
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBarBehavior.InitializeValue">
            <summary>
            Initializes the value.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBarBehavior.UpdateValue(System.Int32)">
            <summary>
            Updates the value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBarBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ProgressBarBehavior"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBarBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBarBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBarBehavior.UpdateDifference">
            <summary>
            Updates the difference.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ProgressBarBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component"/>, or the <see cref="T:WaveEngine.Framework.Entity"/>
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="E:WaveEngine.Components.UI.ProgressBarBehavior.ValueChanged">
            <summary>
            Occurs when [value changed].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBarBehavior.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBarBehavior.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBarBehavior.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBarBehavior.UpdateWidth">
            <summary>
            Sets the width of the update.
            </summary>
            <value>
            The width of the update.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ProgressBarBehavior.UpdateHeight">
            <summary>
            Sets the height of the update.
            </summary>
            <value>
            The height of the update.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.RadioButton">
            <summary>
            RadioButton decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButton.DefaultUncheckedImage">
            <summary>
            The default unchecked image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButton.DefaultCheckedImage">
            <summary>
            The default checked image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButton.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButton.DefaultMargin">
            <summary>
            The default margin
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButton.DefaultCheckedImageMargin">
            <summary>
            The default checked image margin
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButton.radioButtonBehavior">
            <summary>
            The check box behavior
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.RadioButton"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.RadioButton"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButton.RadioButtonBehavior_CheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the CheckedChanged event of the RadioButtonBehavior control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:WaveEngine.Components.UI.RadioButton.Checked">
            <summary>
            Occurs when [Checked].
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.RadioButton.Unchecked">
            <summary>
            Occurs when [unchecked].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.IsChecked">
            <summary>
            Gets or sets a value indicating whether this instance is checked.
            </summary>
            <value>
            <c>true</c> if this instance is checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
            <value>
            The name of the group.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.FontPath">
            <summary>
            Sets the font.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.HorizontalTextAlignment">
            <summary>
            Gets or sets the horizontal text alignment.
            </summary>
            <value>
            The horizontal text alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButton.VerticalTextAlignment">
            <summary>
            Gets or sets the vertical text alignment.
            </summary>
            <value>
            The vertical text alignment.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.RadioButtonBehavior">
            <summary>
            RadioButton Behavior
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.radioCollections">
            <summary>
            The radio collections
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.Gestures">
            <summary>
            The gestures
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.Animation">
            <summary>
            The animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.fadeIn">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.fadeOut">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.imageCheckedEntity">
            <summary>
            The image checked entity
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.imageCheckedTransform">
            <summary>
            The image checked transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.isChecked">
            <summary>
            The is checked
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.RadioButtonBehavior.groupName">
            <summary>
            The group name
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButtonBehavior.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Components.UI.RadioButtonBehavior"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButtonBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.RadioButtonBehavior"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButtonBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButtonBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButtonBehavior.Gestures_TouchReleased(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchReleased event of the gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.RadioButtonBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component"/>, or the <see cref="T:WaveEngine.Framework.Entity"/>
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="E:WaveEngine.Components.UI.RadioButtonBehavior.CheckedChanged">
            <summary>
            Occurs when [Checked].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButtonBehavior.IsChecked">
            <summary>
            Gets or sets a value indicating whether this instance is checked.
            </summary>
            <value>
            <c>true</c> if this instance is checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.RadioButtonBehavior.GroupName">
            <summary>
            Gets or sets the name of the group.
            </summary>
            <value>
            The name of the group.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.ChangedEventHandler">
            <summary>
            Changed Event Handler delegate
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.UI.ChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.ChangedEventArgs">
            <summary>
            Changed events args class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ChangedEventArgs.OldValue">
            <summary>
            The old value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ChangedEventArgs.NewValue">
            <summary>
            The new value
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ChangedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ChangedEventArgs"/> class.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.Slider">
            <summary>
            UI Slider decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.Slider.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.Slider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Slider"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.Slider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.Slider"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Slider.Slider_ValueChanged(System.Object,WaveEngine.Components.UI.ChangedEventArgs)">
            <summary>
            Handles the ValueChanged event of the Slider control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.Slider.Slider_RealTimeValueChanged(System.Object,WaveEngine.Components.UI.ChangedEventArgs)">
            <summary>
            Handles the RealTimeValueChanged event of the Slider control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.UI.ChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:WaveEngine.Components.UI.Slider.ValueChanged">
            <summary>
            Occurs when [value changed].
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.Slider.RealTimeValueChanged">
            <summary>
            Occurs when [real time value changed].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.Background">
            <summary>
            Gets or sets the background.
            </summary>
            <value>
            The background.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.FontPath">
            <summary>
            Sets the font.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.Slider.TextColor">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.SliderBehavior">
            <summary>
            The SliderBehavior class.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.DefaultSliderWeight">
            <summary>
            The default unchecked image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.DefaultTextOffset">
            <summary>
            The default text offset
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.Panel">
            <summary>
            The panel
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.Gestures">
            <summary>
            The gestures
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.bulletImage">
            <summary>
            The bullet image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.foregroundImage">
            <summary>
            The foreground image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.foregroundTransform">
            <summary>
            The foreground transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.backgroundImage">
            <summary>
            The background image
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.bulletTransform">
            <summary>
            The bullet transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.textControl">
            <summary>
            The text control
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.textTransform">
            <summary>
            The text transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.orientation">
            <summary>
            The orientation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.maximum">
            <summary>
            The maximum value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.minimum">
            <summary>
            The minimum value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.value">
            <summary>
            The current value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.fadeIn">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.fadeOut">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.animation">
            <summary>
            The animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.difference">
            <summary>
            The cached difference between maximun and minimun
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.maximunOffset">
            <summary>
            The maximum offset
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.maximunOffsetOver2">
            <summary>
            The maximun offset over2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.bulletWeightOver2">
            <summary>
            The bullet with over2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.oldCachedValue1">
            <summary>
            The old cached value
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SliderBehavior.oldCachedValue2">
            <summary>
            The old cached value
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.SliderBehavior"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.Gestures_TouchPressed(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchPressed event of the Gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.Gestures_TouchMoved(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchMoved event of the Gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.Gestures_TouchReleased(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchReleased event of the Gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.UpdateDifference">
            <summary>
            Updates the difference.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.UpdateValue">
            <summary>
            Updates the value.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.UpdateWidthHorizontalOffset(System.Single)">
            <summary>
            Updates the width horizontal offset.
            </summary>
            <param name="offsetX">The offset X.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.UpdateWidthVerticalOffset(System.Single)">
            <summary>
            Updates the width vertical offset.
            </summary>
            <param name="offsetY">The offset Y.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.UpdateOrientation">
            <summary>
            Updates the orientation.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.SliderBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component"/>, or the <see cref="T:WaveEngine.Framework.Entity"/>
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="E:WaveEngine.Components.UI.SliderBehavior.ValueChanged">
            <summary>
            Occurs when [value changed].
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.SliderBehavior.RealTimeValueChanged">
            <summary>
            Occurs when [real time value changed].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.SliderBehavior.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>
            The maximum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.SliderBehavior.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>
            The minimum.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.SliderBehavior.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.SliderBehavior.UpdateWidth">
            <summary>
            Sets the width of the update.
            </summary>
            <value>
            The width of the update.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.SliderBehavior.UpdateHeight">
            <summary>
            Sets the height of the update.
            </summary>
            <value>
            The height of the update.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.SliderBehavior.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.StackPanel">
            <summary>
            StackPanel decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.StackPanel.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.StackPanel"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.StackPanel"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanel.Add(WaveEngine.Components.UI.UIBase)">
            <summary>
            Adds the specified UI.
            </summary>
            <param name="ui">The UI.</param>
            <exception cref="T:System.ArgumentNullException">UI component is null.</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanel.Remove(WaveEngine.Components.UI.UIBase)">
            <summary>
            Removes the specified UI.
            </summary>
            <param name="ui">The UI.</param>
            <exception cref="T:System.ArgumentNullException">UI component is null.</exception>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanel.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanel.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanel.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanel.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanel.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanel.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanel.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>
            The color of the background.
            </value>
            <exception cref="T:System.Exception">The panel haven't background assigned</exception>
        </member>
        <member name="T:WaveEngine.Components.UI.StackPanelControl">
            <summary>
            The stack panel.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.StackPanelControl.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.StackPanelControl"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelControl.Measure(WaveEngine.Common.Math.Vector2)">
            <summary>
            Measures the specified available size.
            </summary>
            <param name="availableSize">Size of the available.</param>
            <returns>
            Size result.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelControl.Arrange(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Arranges the specified final size.
            </summary>
            <param name="finalSize">The final size.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelControl.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanelControl.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanelControl.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.StackPanelControl.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.CheckBoxBehavior">
            <summary>
            The CheckBoxBehavior class.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBoxBehavior.Gestures">
            <summary>
            The gestures
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBoxBehavior.Animation">
            <summary>
            The animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBoxBehavior.fadeIn">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBoxBehavior.fadeOut">
            <summary>
            The fadein and fadeOut
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBoxBehavior.imageCheckedEntity">
            <summary>
            The image checked entity
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBoxBehavior.imageCheckedTransform">
            <summary>
            The image checked transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.CheckBoxBehavior.isChecked">
            <summary>
            The is checked
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBoxBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.CheckBoxBehavior"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBoxBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBoxBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBoxBehavior.Gestures_TouchReleased(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchReleased event of the gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.CheckBoxBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component"/>, or the <see cref="T:WaveEngine.Framework.Entity"/>
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="E:WaveEngine.Components.UI.CheckBoxBehavior.CheckedChanged">
            <summary>
            Occurs when [Checked].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.CheckBoxBehavior.IsChecked">
            <summary>
            Gets or sets a value indicating whether this instance is checked.
            </summary>
            <value>
            <c>true</c> if this instance is checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.StackPanelRenderer">
            <summary>
            The StackPanel Renderer
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.StackPanelRenderer.instances">
            <summary>
            Total number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.StackPanelRenderer.Transform2D">
            <summary>
            The transform2D
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.StackPanelRenderer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.StackPanelRenderer"/> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelRenderer.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.StackPanelRenderer"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The entity passes the culling test.</description>
            </item>
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable"/> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.StackPanelRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines /&gt;
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.SubTextInfo">
            <summary>
            Helper to TextControl component
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SubTextInfo.Text">
            <summary>
            The line text
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SubTextInfo.Color">
            <summary>
            The text
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.SubTextInfo.Size">
            <summary>
            The size
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.LineInfo">
            <summary>
            Helper to TextControl component
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.LineInfo.SubTextList">
            <summary>
            Sub text list
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.LineInfo.Size">
            <summary>
            The size
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.LineInfo.AlignmentOffsetX">
            <summary>
            The offset alignment
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.LineInfo.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.LineInfo"/> struct.
            </summary>
            <param name="offsetX">offset X alignment.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.LineInfo.#ctor(System.String,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Math.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.LineInfo"/> struct.
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="size">The size.</param>
            <param name="offsetX">offset X alignment.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.LineInfo.AddText(System.String,WaveEngine.Common.Graphics.Color,WaveEngine.Common.Math.Vector2)">
            <summary>
            Add text to the line
            </summary>
            <param name="text">The text.</param>
            <param name="color">The color.</param>
            <param name="size">The size.</param>
        </member>
        <member name="T:WaveEngine.Components.UI.TextAlignment">
            <summary>
            Text alignment
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextAlignment.Left">
            <summary>
            Default.Text is aligned to the left.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextAlignment.Right">
            <summary>
            Text is aligned to the right.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextAlignment.Center">
            <summary>
            Text is centered.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.TextBlock">
            <summary>
            TextBlock decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBlock.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextBlock"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBlock.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextBlock"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBlock.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextBlock"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="layer">The layer.</param>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.LineHeight">
            <summary>
            Gets the height of the line.
            </summary>
            <value>
            The height of the line.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>
            The text alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.TextWrapping">
            <summary>
            Gets or sets a value indicating whether [text wrapping].
            </summary>
            <value>
              <c>true</c> if [text wrapping]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.FontPath">
            <summary>
            Sets the font.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.RichTextEnabled">
            <summary>
            Gets or sets a value indicating whether [rich text enabled].
            </summary>
            <value>
              <c>true</c> if [rich text enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBlock.LineSpacing">
            <summary>
            Gets or sets the line spacing.
            </summary>
            <value>
                The line spacing.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.TextBox">
            <summary>
            TextBox decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBox.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextBox"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextBox"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.AcceptsReturn">
            <summary>
            Gets or sets a value indicating whether [accepts return].
            </summary>
            <value>
              <c>true</c> if [accepts return]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.LineHeight">
            <summary>
            Gets the height of the line.
            </summary>
            <value>
            The height of the line.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>
            The text alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.TextWrapping">
            <summary>
            Gets or sets a value indicating whether [text wrapping].
            </summary>
            <value>
              <c>true</c> if [text wrapping]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.FontPath">
            <summary>
            Sets the font.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.Background">
            <summary>
            Gets or sets the background.
            </summary>
            <value>
            The background.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBox.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.TextControl">
            <summary>
                The text block.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.instances">
            <summary>
                Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.disposed">
            <summary>
            The disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.isGlobalAsset">
            <summary>
            The is global asset.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.fontPath">
            <summary>
            The font path.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.lineSpacing">
            <summary>
            The line spacing.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.lineWidth">
            <summary>
            The line width
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.textWrapping">
            <summary>
            The text wrapping.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControl.textAlignment">
            <summary>
            The text alignment
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextControl"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextControl"/> class.
            </summary>
            <param name="fontPath">
            The font path.
            </param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextControl"/> class. 
            </summary>
            <param name="fontPath">
            The font Path.
            </param>
            <param name="isGlobalAsset">
            The is Global Asset.
            </param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.Dispose(System.Boolean)">
            <summary>
            The dispose.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.Initialize">
            <summary>
                Initializes this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.UpdateSize">
            <summary>
            Updates the size.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.CalculateAlignmentOffset(WaveEngine.Common.Math.Vector2)">
            <summary>
            Calculates the alignment offset.
            </summary>
            <param name="size">The size.</param>
            <returns>Offset X</returns>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControl.UpdateAlignment">
            <summary>
            Updates the alignment.
            </summary>
        </member>
        <member name="E:WaveEngine.Components.UI.TextControl.OnWidthChanged">
            <summary>
            Occurs when Width Change.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.Foreground">
            <summary>
            Gets or sets the color of the fore.
            </summary>
            <value>
                The color of the fore.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.IsGlobalAsset">
            <summary>
            Gets or sets a value indicating whether [perssistent asset].
            </summary>
            <value>
                <c>true</c> if [perssistent asset]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.LineSpacing">
            <summary>
            Gets or sets the line spacing.
            </summary>
            <value>
                The line spacing.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.SpriteFont">
            <summary>
            Gets the spritefont.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
                The text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.RichTextEnabled">
            <summary>
            Gets or sets a value indicating whether [rich text enabled].
            </summary>
            <value>
              <c>true</c> if [rich text enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.LineWidth">
            <summary>
            Gets or sets the width of the line.
            </summary>
            <value>
            The width of the line.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.TextWrapping">
            <summary>
            Gets or sets a value indicating whether [text wrapping].
            </summary>
            <value>
                <c>true</c> if [text wrapping]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <value>
            The text alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.FontHeight">
            <summary>
            Gets the height of the font.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.TextControl.LinesInfo">
            <summary>
            Gets the text lines.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.UI.TextControl.WidthChangedEventHandler">
            <summary>
            Width changed Event Handler delegate
            </summary>
            <param name="sender">The sender.</param>
            <param name="newWidth">The new width.</param>
        </member>
        <member name="T:WaveEngine.Components.Cameras.CameraPoint">
            <summary>
            Struct to define camera points in space.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.CameraPoint.Position">
            <summary>
            The position of the point.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.CameraPoint.Up">
            <summary>
            The up vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.CameraPoint.LookAt">
            <summary>
            The look at vector.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.CameraPoint.#ctor(WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3,WaveEngine.Common.Math.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.CameraPoint"/> struct.
            </summary>
            <param name="position">The position of the point.</param>
            <param name="look">The look at vector.</param>
            <param name="up">The up vector.</param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.CameraPoint.#ctor(WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@,WaveEngine.Common.Math.Vector3@)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.CameraPoint"/> struct.
            </summary>
            <param name="position">The position of the point.</param>
            <param name="look">The look at vector.</param>
            <param name="up">The up vector.</param>
        </member>
        <member name="T:WaveEngine.Components.Cameras.FreeCameraBehavior">
            <summary>
            A behavior that allows a camera to move freely.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.StickThreshold">
            <summary>
            Stick threshold
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.Camera">
            <summary>
            The camera to move.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.cameraMatrixRotation">
            <summary>
            Camera rotation calculation.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.currentMouseState">
            <summary>
            The current mouse state.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.currentTouchLocation">
            <summary>
            The current touch location.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.currentTouchPanelState">
            <summary>
            The current touch panel state.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.forward">
            <summary>
            The forward.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.forwardNormalizedVector">
            <summary>
            The forward normalized vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.input">
            <summary>
            The input.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.isDragging">
            <summary>
            The is dragging.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.isMouseConnected">
            <summary>
            The is mouse connected.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.isTouchPanelConnected">
            <summary>
            The is touch panel connected.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.keyboardState">
            <summary>
            The keyboard state.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.lastMouseState">
            <summary>
            The last mouse state.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.lastTouchLocation">
            <summary>
            The last touch location.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.moveBack">
            <summary>
            The move back.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.moveForward">
            <summary>
            The move forward.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.moveLeft">
            <summary>
            The move left.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.moveRight">
            <summary>
            The move right.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.moveWithTouchPanel">
            <summary>
            The move with touch panel.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.pitch">
            <summary>
            The pitch.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.right">
            <summary>
            The right.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.rightNormalizedVector">
            <summary>
            The right normalized vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.rotationSpeed">
            <summary>
                Mouse speed movement
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.gamepadRotationSpeed">
            <summary>
            GamePad speed movement
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.speed">
            <summary>
                Speed of the movement
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.tempRotationMatrix">
            <summary>
            The temp rotation matrix.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.timeDifference">
            <summary>
            The time difference.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.upNormalizedVector">
            <summary>
            The up normalized vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.xDifference">
            <summary>
            The x difference.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.yDifference">
            <summary>
            The y difference.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.FreeCameraBehavior.yaw">
            <summary>
            The yaw.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCameraBehavior.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.FreeCameraBehavior"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCameraBehavior.Initialize">
            <summary>
                Performs further custom initialization for this instance.
            </summary>
            <remarks>
                By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCameraBehavior.Update(System.TimeSpan)">
            <summary>
            Updates the camera position.
            </summary>
            <param name="gameTime">
            The elapsed game time.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCameraBehavior.HandleInput(System.Single)">
            <summary>
            The handle input.
            </summary>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCameraBehavior.UpdateCameraPosition">
            <summary>
            The update camera position.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.FreeCameraBehavior.UpdateLookAt">
            <summary>
            The update look at.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FreeCameraBehavior.RotationSpeed">
            <summary>
            Gets or sets the rotation speed.
            </summary>
            <value>
            The rotation speed.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FreeCameraBehavior.GamepadRotationSpeed">
            <summary>
            Gets or sets the gamepad rotation speed.
            </summary>
            <value>
            The rotation speed.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.FreeCameraBehavior.Speed">
            <summary>
            Gets or sets the speed of the camera movement.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Cameras.Path">
            <summary>
            A collection of <see cref="T:WaveEngine.Components.Cameras.CameraPoint"/>s.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.Path.LoopEnabled">
            <summary>
            Whether this path should loop.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.Path.camIndex">
            <summary>
            The cam index.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.Path.currentPathPoints">
            <summary>
            The current path points.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.Path.CurrentPoint">
            <summary>
            The current point.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.Path.keyFrames">
            <summary>
            The key frames.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.Path.pathSteps">
            <summary>
            The path steps.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.Path.#ctor(System.Collections.Generic.List{WaveEngine.Components.Cameras.CameraPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.Path"/> class.
            </summary>
            <param name="cameraPoints">
            The camera positions.
            </param>
            <exception cref="T:System.ArgumentException">
            If cameraPoints is null or empty.
            </exception>
        </member>
        <member name="M:WaveEngine.Components.Cameras.Path.#ctor(System.Collections.Generic.List{WaveEngine.Components.Cameras.CameraPoint},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.Path"/> class.
            </summary>
            <param name="cameraPoints">
            The camera positions.
            </param>
            <param name="interpoledPointsPerCameraPosition">
            The number of points to interpolate between each camera position.
            </param>
            <exception cref="T:System.ArgumentException">
            If cameraPoints is null or empty.
            </exception>
        </member>
        <member name="M:WaveEngine.Components.Cameras.Path.Evaluate(System.Int32)">
            <summary>
            Get the next point of the path.
            </summary>
            <param name="milliseconds">
            The milliseconds to advance in the path.
            </param>
            <returns>
            The next camera point in the path.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Cameras.Path.ResetIndex">
            <summary>
                Restarts the path.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.Path.BuildPath(System.Int32)">
            <summary>
            The build path.
            </summary>
            <param name="pointsPerElement">
            The points per element.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.Path.BuildPath">
            <summary>
                Constructs an interpolated path based on the Key Frames.
                Options are Linear or Cubic interpolation
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.Path.Initialize(System.Collections.Generic.List{WaveEngine.Components.Cameras.CameraPoint},System.Int32)">
            <summary>
            Initialize the path context
            </summary>
            <param name="cameraPoints">
            A few camera points to interpolate
            </param>
            <param name="pointsPerElement">
            The points per camera point to calculate
            </param>
        </member>
        <member name="T:WaveEngine.Components.Cameras.PathCameraBehavior">
            <summary>
            A behavior that moves a camera along a defined path of points.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.PathCameraBehavior.speed">
            <summary>
                Speed of the camera.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.PathCameraBehavior.Camera">
            <summary>
                The camera to move.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.PathCameraBehavior.path">
            <summary>
                The path component.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.PathCameraBehavior.currentCameraPoint">
            <summary>
                The current camera point.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.PathCameraBehavior.currentState">
            <summary>
                The current state of the path behavior.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.PathCameraBehavior.#ctor(System.Collections.Generic.List{WaveEngine.Components.Cameras.CameraPoint})">
            <summary>
                Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.PathCameraBehavior"/> class.
            </summary>
            <param name="cameraPoints">The camera points.</param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.PathCameraBehavior.#ctor(System.Collections.Generic.List{WaveEngine.Components.Cameras.CameraPoint},System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.PathCameraBehavior"/> class.
            </summary>
            <param name="cameraPoints">The camera points.</param>
            <param name="pathFrames">The frames between each camera point.</param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.PathCameraBehavior.Update(System.TimeSpan)">
            <summary>
                Updates the camera movement.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Cameras.PathCameraBehavior.ChangeState(WaveEngine.Components.Cameras.PathCameraBehavior.State)">
            <summary>
                Update the state of the behavior
            </summary>
            <param name="newState">The new state to set</param>
        </member>
        <member name="P:WaveEngine.Components.Cameras.PathCameraBehavior.CurrentState">
            <summary>
            Gets or sets the state of the current state of the behavior.
            </summary>
            <value>
            The state of the current.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.PathCameraBehavior.Speed">
            <summary>
            Gets or sets the speed.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Cameras.PathCameraBehavior.State">
            <summary>
                State of the behavior
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.PathCameraBehavior.State.Stop">
            <summary>
                The behavior is stopped.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.PathCameraBehavior.State.Play">
            <summary>
                The behavior is playing.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.PathCameraBehavior.State.PlayAndRepeat">
            <summary>
                The behavior is playing in a loop.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.PathCameraBehavior.State.Pause">
            <summary>
                The behavior is paused.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Cameras.ThirdCameraBehavior">
            <summary>
            A behavior that simulates a third person camera.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ThirdCameraBehavior.PivotDelay">
            <summary>
            Camera movement delay.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ThirdCameraBehavior.entity">
            <summary>
            The entity to follow.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ThirdCameraBehavior.targetTransform">
            <summary>
            The target transform.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ThirdCameraBehavior.Camera">
            <summary>
            The camera to move.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ThirdCameraBehavior.cameraPosition">
            <summary>
            The current camera position.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ThirdCameraBehavior.calculatedOffsetVector">
            <summary>
            The calculated offset vector.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ThirdCameraBehavior.pivotPlayer">
            <summary>
            The pivot position.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ThirdCameraBehavior.cameraDistance">
            <summary>
            The camera distance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ThirdCameraBehavior.#ctor(WaveEngine.Framework.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.ThirdCameraBehavior"/> class.
            </summary>
            <param name="entity">The entity.</param>
            <exception cref="T:System.ArgumentNullException">If entity is null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ThirdCameraBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the transform was not set.</exception>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ThirdCameraBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ThirdCameraBehavior.Update(System.TimeSpan)">
            <summary>
            Updates the camera position.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="P:WaveEngine.Components.Cameras.ThirdCameraBehavior.CameraDistance">
            <summary>
                Gets or sets the distance from the target position.
            </summary>
            <value>
                The camera distance from the target position.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Cameras.ThirdCameraBehavior.TargetPosition">
            <summary>
            Gets or sets the position to follow.
            </summary>
            <value>
            The position to follow.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Cameras.ViewCameraBehavior">
            <summary>
            A behavior that allows a camera to rotate around the lookAt
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCameraBehavior.Camera">
            <summary>
            The camera to move.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCameraBehavior.RotationSpeed">
            <summary>
            The speed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCameraBehavior.touchState">
            <summary>
            The touch state.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCameraBehavior.isDragging">
            <summary>
            The is dragging.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCameraBehavior.prevPosition">
            <summary>
            The prev position.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCameraBehavior.currentPosition">
            <summary>
            The current position.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCameraBehavior.delta">
            <summary>
            The delta.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCameraBehavior.theta">
            <summary>
            The theta angle
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCameraBehavior.phi">
            <summary>
            The phi angle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Cameras.ViewCameraBehavior.initialPosition">
            <summary>
            The initial position.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ViewCameraBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Cameras.ViewCameraBehavior"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ViewCameraBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ViewCameraBehavior.Update(System.TimeSpan)">
            <summary>
            Manage the touch state input when dragging to calculate delta, phi and theta angles
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component"/>, or the <see cref="T:WaveEngine.Framework.Entity"/>
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Cameras.ViewCameraBehavior.UpdateCameraPosition">
            <summary>
            Calculates the new camera Position relative to the initial position and lookAt
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Catalog">
            <summary>
            Class that holds a catalog of items organized by their types.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Catalog.items">
            <summary>
            Hold the generic values.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Catalog.RegisterItem``1(``0)">
            <summary>
            Registers an item.
            </summary>
            <typeparam name="T">Type of the item</typeparam>
            <param name="item">The item to register.</param>
            <exception cref="T:System.ArgumentNullException">If item is null.</exception>
        </member>
        <member name="M:WaveEngine.Components.Catalog.GetItem``1">
            <summary>
            Gets an item.
            </summary>
            <typeparam name="T">Type of the item.</typeparam>
            <returns>The registered item, or the default value for its type in case it was not found.</returns>
        </member>
        <member name="T:WaveEngine.Components.Gestures.GestureEventArgs">
            <summary>
            Provides information about a gesture event when such is raised.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureEventArgs.GestureSample">
            <summary>
            Relevant information about the gesture performed.
            See <see cref="F:WaveEngine.Components.Gestures.GestureEventArgs.GestureSample"/> for more information.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.GestureEventArgs.#ctor(WaveEngine.Components.Gestures.GestureSample)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs"/> class.
            </summary>
            <param name="sample">The gesture that was performed.</param>
        </member>
        <member name="T:WaveEngine.Components.Gestures.GestureSample">
            <summary>
            Struct that holds the information of a gesture.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureSample.Position">
            <summary>
            Position of the gesture.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureSample.DeltaTranslation">
            <summary>
            Translation vector between the latest and the current point
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureSample.DeltaAngle">
            <summary>
            Angle of the rotation between the latest and the current point
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureSample.DeltaScale">
            <summary>
            Scale of the gesture
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureSample.DiffScale">
            <summary>
            Scale difference between the latest and the current point
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureSample.Type">
            <summary>
            Type of gesture.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureSample.IsNew">
            <summary>
            If the point is new or it previously existing
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Gestures.GestureType">
            <summary>
            Type of a gesture.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureType.None">
            <summary>
            The none.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureType.Pressed">
            <summary>
            The pressed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureType.Tap">
            <summary>
            The tap.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureType.Drag">
            <summary>
            The drag.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureType.Stopped">
            <summary>
            The stopped.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.GestureType.Free">
            <summary>
            The free.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Gestures.SupportedGesture">
            <summary>
            Supported gestures by a control.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.SupportedGesture.None">
            <summary>
            No gestures supported.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.SupportedGesture.Translation">
            <summary>
            Gestures that involve translation are supported.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.SupportedGesture.Rotation">
            <summary>
            Gestures that involve rotation are supported.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.SupportedGesture.Scale">
            <summary>
            Gestures that involve scaling are supported.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Gestures.TouchGestures">
            <summary>
            Enables an <see cref="T:WaveEngine.Framework.Entity"/> to support touchs.
            It requires a <see cref="T:WaveEngine.Framework.Physics2D.Collider2D"/> (usually, <see cref="T:WaveEngine.Framework.Physics2D.RectangleCollider"/>) 
            and a <see cref="F:WaveEngine.Components.Gestures.TouchGestures.Transform2D"/>.
            Common events on touch scenarios are provided: pressed, released, etc.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.TapThreshold">
            <summary>
            The tap threshold
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.enabledGestures">
            <summary>
            Valid gestures that will be recognized by this behavior.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.currentTouches">
            <summary>
            Current toches list.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.numTouches">
            <summary>
            Number of touches.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.currentCentroid">
            <summary>
            The current centroid.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.previousCentroid">
            <summary>
            The previous centroid
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.currentFarthers1">
            <summary>
            The current farthers1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.currentFarthers2">
            <summary>
            The current farthers2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.previourFarthers1">
            <summary>
            The previour farthers1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.previousFarthers2">
            <summary>
            The previous farthers2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.gestureSample">
            <summary>
            The gesture sample
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.translation">
            <summary>
            The translation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.state">
            <summary>
            The state
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.touchManager">
            <summary>
            The touch manager
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.startTapPosition">
            <summary>
            The start tap position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.minScale">
            <summary>
            The minimun scale
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.maxScale">
            <summary>
            The maximun scale
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.touchOrder">
            <summary>
            The touch order
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.Collider">
            <summary>
            Required <see cref="T:WaveEngine.Framework.Physics2D.Collider2D"/>.
            It provides a way to detect whether a touch hits the dessired area.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Gestures.TouchGestures.Transform2D">
            <summary>
            Required <see cref="F:WaveEngine.Components.Gestures.TouchGestures.Transform2D"/>.
            It provides position information to generate touch events data.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Gestures.TouchGestures"/> class.
            By default, scale is within [0.1, 5], the delta scale is set to 1 and there is no 
            supported gesture.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.Contains(WaveEngine.Common.Math.Vector2)">
            <summary>
            Determines whether the required <see cref="T:WaveEngine.Framework.Physics2D.Collider2D"/> contains the passed point.
            </summary>
            <param name="point">The point.</param>
            <returns>
              <c>true</c> if the point is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.AddTouch(WaveEngine.Common.Input.TouchLocation,System.Boolean)">
            <summary>
            Adds a <see cref="T:WaveEngine.Common.Input.TouchLocation"/> to the current active touches.
            </summary>
            <param name="touch">The touch location.</param>
            <param name="isNew">Whether such touch must be considered as new.</param>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.ReadGesture">
            <summary>
            Gets the current <see cref="T:WaveEngine.Components.Gestures.GestureSample"/>.
            </summary>
            <returns>The current <see cref="T:WaveEngine.Components.Gestures.GestureSample"/></returns>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.UpdateTouchOrder">
            <summary>
            If and only if <see cref="P:WaveEngine.Components.Gestures.TouchGestures.ManualTouchOrder"/> is set to <c>false</c> (by default it is)
            the touch order is calculated based on both <see pref="Transform2D.DrawOrder"/> and
            the <see cref="T:WaveEngine.Framework.Graphics.Layer"/> used.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.DrawOrderPropertyChanged(System.Object,WaveEngine.Framework.DependencyPropertyChangedEventArgs@)">
            <summary>
            Draws the order property changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:WaveEngine.Framework.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.Update(System.TimeSpan)">
            <summary>
            Updates this behavior.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.NoneState">
            <summary>
            Handle the NoneState
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.PressedState">
            <summary>
            Handle the PressedState
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.TapState">
            <summary>
            Handle the TapState
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.StoppedAndDragState">
            <summary>
            Handle the StoppedAndDragState
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.FreeState">
            <summary>
            Handle the FreeState
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.InvokeEvent(System.EventHandler{WaveEngine.Components.Gestures.GestureEventArgs},WaveEngine.Components.Gestures.GestureSample)">
            <summary>
            Invokes the event.
            </summary>
            <param name="touchEvent">The touch event.</param>
            <param name="sample">The gesture sample.</param>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.UpdatePreviousValues">
            <summary>
            Updates the previous values.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.IsMovingOverThreshold">
            <summary>
            Determines whether [is moving over threshold].
            </summary>
            <returns>
              <c>true</c> if [is moving over threshold]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.IsMoving">
            <summary>
            Determines whether this instance is moving.
            </summary>
            <returns>
              <c>true</c> if this instance is moving; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.IsGestureSupported(WaveEngine.Components.Gestures.SupportedGesture)">
            <summary>
            Determines whether a type of gesture is supported.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the type of gesture is supported; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.ComputeCentroid(System.Collections.Generic.List{WaveEngine.Common.Input.TouchLocation})">
            <summary>
            Computes the centroid of a group of touches.
            </summary>
            <param name="touches">The touches.</param>
            <returns>The centroid position.</returns>
        </member>
        <member name="M:WaveEngine.Components.Gestures.TouchGestures.FindTwoFarthestTouches(System.Collections.Generic.List{WaveEngine.Common.Input.TouchLocation},WaveEngine.Common.Math.Vector2@,WaveEngine.Common.Math.Vector2@)">
            <summary>
            Finds the two farthest touches in a group of touches.
            </summary>
            <param name="touches">The touches.</param>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
        </member>
        <member name="E:WaveEngine.Components.Gestures.TouchGestures.TouchTap">
            <summary>
            Occurs when there is a tap gesture.
            </summary>
        </member>
        <member name="E:WaveEngine.Components.Gestures.TouchGestures.TouchPressed">
            <summary>
            Occurs when there is a pressed gesture.
            </summary>
        </member>
        <member name="E:WaveEngine.Components.Gestures.TouchGestures.TouchReleased">
            <summary>
            Occurs when there is a released gesture.
            </summary>
        </member>
        <member name="E:WaveEngine.Components.Gestures.TouchGestures.TouchMoved">
            <summary>
            Occurs when there is a moved gesture.
            </summary>
        </member>
        <member name="E:WaveEngine.Components.Gestures.TouchGestures.TouchOrdenChanged">
            <summary>
            Occurs when touch order is changed.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Gestures.TouchGestures.TouchOrder">
            <summary>
            Gets or sets the touch order.
            Value within [0, Int32.MaxValue] where 0 means the farthest (i.e., the last to receive the touch gesture) 
            and bigger values come near increasing the chance to receive the input.
            NOTE: It is required to have set <see cref="P:WaveEngine.Components.Gestures.TouchGestures.ManualTouchOrder"/> to <c>true</c> in order the engine not to override
            this value. See <see cref="P:WaveEngine.Components.Gestures.TouchGestures.ManualTouchOrder"/> for a more detailed information.
            </summary>
            <value>
            The touch order.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Gestures.TouchGestures.MinScale">
            <summary>
            Gets or sets the minimun scale.
            Value within [0, float.MaxValue] which is understood as the minimun scale applicable to required 
            <see cref="F:WaveEngine.Components.Gestures.TouchGestures.Transform2D"/> when <see cref="F:WaveEngine.Components.Gestures.SupportedGesture.Scale"/> is enabled through 
            <see cref="P:WaveEngine.Components.Gestures.TouchGestures.EnabledGestures"/>.
            </summary>
            <value>
            The minimun scale.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Gestures.TouchGestures.MaxScale">
            <summary>
            Gets or sets the maximun scale.
            Value within [0, float.MaxValue] which is understood as the maximun scale applicable to required 
            <see cref="F:WaveEngine.Components.Gestures.TouchGestures.Transform2D"/> when <see cref="F:WaveEngine.Components.Gestures.SupportedGesture.Scale"/> is enabled through 
            <see cref="P:WaveEngine.Components.Gestures.TouchGestures.EnabledGestures"/>.
            </summary>
            <value>
            The maximun scale.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Gestures.TouchGestures.EnabledGestures">
            <summary>
            Gets or sets which gestures are enabled.
            See <see cref="T:WaveEngine.Components.Gestures.SupportedGesture"/> for available options.
            Such values can be set through bit masks, enabling more than once at the same time, for example:
            EnabledGestures = SupportedGestures.Translation | SupportedGestures.Rotation
            </summary>
            <value>
            The enabled gestures.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Gestures.TouchGestures.ManualTouchOrder">
            <summary>
            Gets or sets a value indicating whether using <see cref="P:WaveEngine.Components.Gestures.TouchGestures.TouchOrder"/>,
            or a different order gathered using both the <see pref="Transform2D.DrawOrder"/> and
            the <see cref="T:WaveEngine.Framework.Graphics.Layer"/> used. Such calcs are performed during the call to 
            <see cref="M:WaveEngine.Components.Gestures.TouchGestures.UpdateTouchOrder"/>.
            </summary>
            <value>
              <c>true</c> if using <see cref="P:WaveEngine.Components.Gestures.TouchGestures.TouchOrder"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Particles.Particle">
            <summary>
            Class that holds the information of a particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.Alive">
            <summary>
            Whether the particle is alive.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.StartTime">
            <summary>
            Time of birth.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.Size">
            <summary>
            Size of the particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.Position">
            <summary>
            Position of the particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.Velocity">
            <summary>
            Velocity of the particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.Angle">
            <summary>
            Angle of the particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.VelocityRotation">
            <summary>
            Rotation velocity of the particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.Color">
            <summary>
            Color of the particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.CurrentColor">
            <summary>
            Current color of the particle if the color is interpolated.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.CurrentIndex">
            <summary>
            Current index of the particle color if the color is based on a list of possible colors.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.TimeLife">
            <summary>
            Total life time of the particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.Particle.Life">
            <summary>
            Current life left in the particle.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem3D">
            <summary>
            Particle system class.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.instances">
            <summary>
                Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.RandomVelocity">
            <summary>
            How much random velocity to give each particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.Gravity">
            <summary>
            Direction and strength of the gravity effect.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.EmitterShape">
            <summary>
                Emiter shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.LocalVelocity">
            <summary>
                How much X, Y and Z axis velocity to give each particle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.MaxColor">
            <summary>
            The max color.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.MaxLife">
            <summary>
            The max life.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.InterpolationColors">
            <summary>
                Range of color for particle life.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.MinColor">
            <summary>
                Range of values controlling the particle color and alpha.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.MinLife">
            <summary>
                How long these particles will last.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.EmitterSize">
            <summary>
                Size of emiter.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.endDeltaScale">
            <summary>
            The end delta scale.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.numParticles">
            <summary>
                Maximun number of particles that can be displayed at one time.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.textureName">
            <summary>
            Name of the texture used by this instance.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.CollisionType">
            <summary>
            If collisions are enabled.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.CollisionBehavior">
            <summary>
            Behavior of the particles when collide.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.Bounciness">
            <summary>
            Responsiveness to bouncing when collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.CollisionMinX">
            <summary>
            Collision Min X.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.CollisionMaxX">
            <summary>
            Collision Max X.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.CollisionMinY">
            <summary>
            Collision Min Y.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.CollisionMaxY">
            <summary>
            Collision Max Y.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.CollisionMinZ">
            <summary>
            Collision Min Z.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.CollisionMaxZ">
            <summary>
            Collision Max Z.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.CollisionSpread">
            <summary>
            Spread of a particle velocity when collides.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Particles.ParticleSystem3D.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WaveEngine.Components.Particles.ParticleSystem3D"/> class.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.AlphaEnabled">
            <summary>
                Gets or sets a value indicating whether alpha is enabled.
            </summary>
            <value>
                <c>true</c> if alpha is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.Emit">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:WaveEngine.Components.Particles.ParticleSystem3D"/> is enabled.
            </summary>
            <value>
                <c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.EndDeltaScale">
            <summary>
                Gets or sets the end delta scale.
            </summary>
            <value>
                The end delta scale.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.InitialAngle">
            <summary>
                Gets or sets the initial angle of the particles.
            </summary>
            <value>
                The initial angle of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.LinearColorEnabled">
            <summary>
                Gets or sets a value indicating whether linear color interpolation is enabled.
            </summary>
            <value>
                <c>true</c> if linear color interpolation is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.MaxRotateSpeed">
            <summary>
            Gets or sets the maximum rotation speed of the particles.
            </summary>
            <value>
            The maximum rotation speed of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.MaxSize">
            <summary>
                Gets or sets the maximum size of the particles.
            </summary>
            <value>
                The maximum size of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.MinRotateSpeed">
            <summary>
                Gets or sets the minimum rotation speed of the particles.
            </summary>
            <value>
                The minimum rotation speed of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.MinSize">
            <summary>
                Gets or sets the minimum size of the particles.
            </summary>
            <value>
                The minimum size of the particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.NumParticles">
            <summary>
                Gets or sets the number of particles.
            </summary>
            <value>
                The num particles.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Particles.ParticleSystem3D.TextureName">
            <summary>
            Gets or sets the name of the texture used for the particles.
            </summary>
            <value>
            The name of the texture used for the particles.
            </value>
            <exception cref="T:System.InvalidOperationException">TextureName can not be Empty</exception>
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem3D.Shape">
            <summary>
                Shape of the particles.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.Shape.Rectangle">
            <summary>
                Rectangle shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.Shape.FillRectangle">
            <summary>
                Fill rectangle shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.Shape.Circle">
            <summary>
                Circle shape.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.Shape.FillCircle">
            <summary>
                Fill circle shape.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionBehavior">
            <summary>
            Behavior of a particle when collides
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionBehavior.Die">
            <summary>
            The particle dies
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionBehavior.Bounce">
            <summary>
            The particle bounces
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags">
            <summary>
            Flags of collision
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags.None">
            <summary>
            No collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags.MinX">
            <summary>
            Min X collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags.MaxX">
            <summary>
            Max X Collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags.MinY">
            <summary>
            Min Y collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags.MaxY">
            <summary>
            Max Y collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags.MinZ">
            <summary>
            Min Z collision.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Particles.ParticleSystem3D.ParticleCollisionFlags.MaxZ">
            <summary>
            Max Z collision.
            </summary>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Capsule">
            <summary>
            A 3D capsule.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Capsule.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Capsule"/> class.
            </summary>
            <param name="height">The height.</param>
            <param name="radius">The radius.</param>
            <param name="tessellation">The tessellation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If tessellation is not divisible by 2.</exception>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Cone">
            <summary>
            A 3D cone.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Cone.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Cone"/> class.
            </summary>
            <param name="height">The height.</param>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If tessellation is less than 3.</exception>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Cone.CreateCap(System.Int32,System.Single,System.Single,WaveEngine.Common.Math.Vector3)">
            <summary>
            Helper method creates a triangle fan to close the ends of the cylinder.
            </summary>
            <param name="tessellation">The tessellation.</param>
            <param name="height">The height.</param>
            <param name="radius">The radius.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Cube">
            <summary>
            A 3D cube.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Cube.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Cube"/> class.
            </summary>
            <param name="size">The size of cube.</param>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Cylinder">
            <summary>
            A 3D cylinder.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Cylinder.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Cylinder"/> class.
            </summary>
            <param name="height">The height.</param>
            <param name="diameter">The diameter.</param>
            <param name="tessellation">The tessellation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If tessellation is less than 3.</exception>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Cylinder.CreateCap(System.Int32,System.Single,System.Single,WaveEngine.Common.Math.Vector3)">
            <summary>
            Helper method that creates a triangle fan to close the ends of the cylinder.
            </summary>
            <param name="tessellation">The tessellation.</param>
            <param name="height">The height.</param>
            <param name="radius">The radius.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Plane">
            <summary>
            A 2D plane.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Plane.#ctor(WaveEngine.Common.Math.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Plane"/> class.
            </summary>
            <param name="normal">Normal of plane.</param>
            <param name="size">Size of plane.</param>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Pyramid">
            <summary>
            A 3D pyramid.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Pyramid.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Pyramid"/> class.
            </summary>
            <param name="size">The size of the base.</param>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Sphere">
            <summary>
            A 3D sphere.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Sphere.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Sphere"/> class.
            </summary>
            <param name="diameter">The sphere diameter.</param>
            <param name="tessellation">The sphere tessellation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If tessellation is less than 3.</exception>
        </member>
        <member name="T:WaveEngine.Components.Primitives.Torus">
            <summary>
            A 3D torus.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Primitives.Torus.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Primitives.Torus"/> class.
            </summary>
            <param name="diameter">The diameter.</param>
            <param name="thickness">The thickness.</param>
            <param name="tessellation">The tessellation.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If tessellation is less than 3.</exception>
        </member>
        <member name="T:WaveEngine.Components.UI.ImageControl">
            <summary>
            Image control.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControl.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControl.whitePixel">
            <summary>
            The white pixel
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControl.isGlobalAsset">
            <summary>
            The is global asset
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControl.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControl.SourceRectangle">
            <summary>
            The source rectangle
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControl.isTextureColor">
            <summary>
            The texture color
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:WaveEngine.Components.UI.ImageControl"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageControl"/> class.
            </summary>
            <param name="texturePath">The texture path.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControl.#ctor(WaveEngine.Common.Graphics.Texture)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageControl"/> class.
            </summary>
            <param name="texture">Texture instance.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControl.#ctor(WaveEngine.Common.Graphics.Color,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageControl"/> class.
            </summary>
            <param name="color">The color.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControl.Arrange(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Arranges the specified final size.
            </summary>
            <param name="finalSize">The final size.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControl.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControl.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageControl.IsGlobalAsset">
            <summary>
            Gets or sets a value indicating whether [perssistent asset].
            </summary>
            <value>
              <c>true</c> if [perssistent asset]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageControl.TexturePath">
            <summary>
            Gets or sets the texture path.
            </summary>
            <value>
            The texture path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageControl.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>
            The texture.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageControl.TintColor">
            <summary>
            Gets or sets the color of the tint.
            </summary>
            <value>
            The color of the tint.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageControl.Stretch">
            <summary>
            Gets or sets the stretch.
            </summary>
            <value>
            The stretch.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.ImageAtlas">
            <summary>
            The image atlas.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlas.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlas.isGlobalAsset">
            <summary>
            The is global asset.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlas.disposed">
            <summary>
            The disposed
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlas.SourceRectangle">
            <summary>
            The source rectangle.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlas.textureName">
            <summary>
            The texture name.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlas.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageAtlas"/> class.
            </summary>
            <param name="atlasPath">The atlas path.</param>
            <param name="textureName">Name of the texture.</param>
            <exception cref="T:System.ArgumentException">TexturePath can not be null.</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlas.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlas.UpdateSourceRectangle">
            <summary>
            Updates the source rectangle.
            </summary>
            <exception cref="T:System.ObjectDisposedException">ImageAtlasRenderer has been disposed.</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlas.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageAtlas.IsGlobalAsset">
            <summary>
            Gets or sets a value indicating whether [perssistent asset].
            </summary>
            <value>
              <c>true</c> if [perssistent asset]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageAtlas.AtlasPath">
            <summary>
            Gets or sets the atlas path.
            </summary>
            <value>
            The atlas path.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageAtlas.TextureName">
            <summary>
            Gets or sets the name of the texture.
            </summary>
            <value>
            The name of the texture.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageAtlas.TextureAtlas">
            <summary>
            Gets or sets the texture atlas.
            </summary>
            <value>
            The texture atlas.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageAtlas.TintColor">
            <summary>
            Gets or sets the color of the tint.
            </summary>
            <value>
            The color of the tint.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageAtlas.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ImageAtlas.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.ImageAtlasRenderer">
            <summary>
            The Image atlas renderer.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlasRenderer.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlasRenderer.Transform2D">
            <summary>
            The transform 2d.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlasRenderer.Image">
            <summary>
            The image.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlasRenderer.position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlasRenderer.scale">
            <summary>
            The scale.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageAtlasRenderer.origin">
            <summary>
            The origin.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlasRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageAtlasRenderer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlasRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageAtlasRenderer"/> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlasRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable"/> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlasRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageAtlasRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines /&gt;
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.ImageControlRenderer">
            <summary>
            The Image renderer.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControlRenderer.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControlRenderer.Transform2D">
            <summary>
            The transform 2 d.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControlRenderer.Image">
            <summary>
            The Image.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControlRenderer.position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControlRenderer.scale">
            <summary>
            The scale.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ImageControlRenderer.origin">
            <summary>
            The origin.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControlRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageControlRenderer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControlRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ImageControlRenderer"/> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControlRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable"/> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControlRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ImageControlRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines /&gt;
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.ModelRenderer">
            <summary>
            Renders a 3D model on the screen.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.Model">
            <summary>
            <see cref="F:WaveEngine.Components.Graphics3D.ModelRenderer.Model"/> to render.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.MaterialMap">
            <summary>
            Materials used rendering the <see cref="F:WaveEngine.Components.Graphics3D.ModelRenderer.Model"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.Transform">
            <summary>
            Transform of the <see cref="F:WaveEngine.Components.Graphics3D.ModelRenderer.Model"/>.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.diffuseColor">
            <summary>
            The diffuse color
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.alpha">
            <summary>
            The alpha
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.boneNames">
            <summary>
            The bone names
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.lastModelId">
            <summary>
            The last mesh id
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.meshMaterials">
            <summary>
            The mesh materials
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ModelRenderer.cachedWorlds">
            <summary>
            Meshes world matrix for static entities
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.ModelRenderer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.ModelRenderer"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.Initialize">
            <summary>
            Initialize model renderer
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.Draw(System.TimeSpan)">
            <summary>
            Draws the model.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.TryGetBoneWorldTransform(System.String,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Tries to get the world transform of a given bone.
            </summary>
            <param name="boneName">Name of the bone.</param>
            <param name="transform">The transform of the bone.</param>
            <returns><c>true</c> if it was possible to get the world transform, otherwise <c>false</c></returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.ResolveDependencies">
            <summary>
            Resolves the dependencies.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.DeleteDependencies">
            <summary>
            Deletes the dependencies.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ModelRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.ModelRenderer.DiffuseColor">
            <summary>
            Gets or sets the diffuse color used when rendering the model.
            </summary>
            <value>
            The diffuse color.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.ModelRenderer.Alpha">
            <summary>
            Gets or sets the alpha value used when rendering the model.
            </summary>
            <value>
            The alpha value.
            </value>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D">
            <summary>
            Renders a particle system on the screen.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.VELOCITYFACTOR">
            <summary>
            Velocity adjust of the particles.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.InitTimeMultipler">
            <summary>
            The init time multipler
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.localWorld">
            <summary>
            The renderer local world
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.instances">
            <summary>
            Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.System">
            <summary>
            Particle system rendered.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.MaterialMap">
            <summary>
            Materials used rendering the particle system.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.Transform">
            <summary>
            Transform of the particle system emitter.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.random">
            <summary>
            The random
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.aliveParticles">
            <summary>
            The alive particles
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.numParticles">
            <summary>
            The num particles
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.numVertices">
            <summary>
            The num vertices
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.numIndices">
            <summary>
            The num indices
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.numPrimitives">
            <summary>
            The num primitives
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.particles">
            <summary>
            The particles
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.vertices">
            <summary>
            The vertices
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.mesh">
            <summary>
            Particle mesh
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.settings">
            <summary>
            The settings
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.internalEnabled">
            <summary>
            The internal enabled
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.disposed">
            <summary>
            Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.vertex1">
            <summary>
            The vertex1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.vertex2">
            <summary>
            The vertex2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.vertex3">
            <summary>
            The vertex3
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.vertex4">
            <summary>
            The vertex4
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.texcoord1">
            <summary>
            The texcoord1
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.texcoord2">
            <summary>
            The texcoord2
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.texcoord3">
            <summary>
            The texcoord3
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.texcoord4">
            <summary>
            The texcoord4
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.rotationMatrix">
            <summary>
            The rotation matrix
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.rotationVector">
            <summary>
            The rotation vector
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.Draw(System.TimeSpan)">
            <summary>
            Draws the particle system.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.ResolveDependencies">
            <summary>
            Resolve the dependencies
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.LoadParticleSystem">
            <summary>
            Set the current settings to the particle system attached
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.ResetParticle(WaveEngine.Components.Particles.Particle@)">
            <summary>
            Resets the particle.
            </summary>
            <param name="p">The p.</param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.ParticleSystemRenderer3D.CalculateLocalWorld(WaveEngine.Components.Particles.Particle@)">
            <summary>
            Calculates the local world.
            </summary>
            <param name="p">The p.</param>
            <returns>World matrix.</returns>
            <exception cref="T:System.ObjectDisposedException">ParticleSystemRenderer has been disposed.</exception>
        </member>
        <member name="T:WaveEngine.Components.Graphics3D.SkinnedModelRenderer">
            <summary>
            Renders an animated model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.Quality">
            <summary>
            The quality.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.instances">
            <summary>
                Number of instances of this component created.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.Animation">
            <summary>
                Specific animation to render.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.MaterialMap">
            <summary>
                Materials used rendering the animated model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.Model">
            <summary>
                Animated model to render.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.Transform">
            <summary>
                Transform of the animated model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.boneNames">
            <summary>
            The bone names.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.lastModelId">
            <summary>
            The last mesh id
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.meshMaterials">
            <summary>
            The mesh materials
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.alpha">
            <summary>
            The alpha.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.boneTransforms">
            <summary>
            The bone transforms.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.diffuseColor">
            <summary>
            The diffuse color.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.disposed">
            <summary>
                Wether this instance has been disposed.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.isHidef">
            <summary>
            The is hidef.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.lastKeyFrame">
            <summary>
            The last key frame.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.lineColor">
            <summary>
            The line color.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.lodDiffDistance">
            <summary>
            The lod diff distance.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.lodMaxDistance">
            <summary>
            The lod max distance.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.lodMinDistance">
            <summary>
            The lod min distance.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.passUpdate">
            <summary>
            The pass update.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.skinTransforms">
            <summary>
            The skin transforms.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.skinnedModel">
            <summary>
            The skinned model.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.updateLod">
            <summary>
            The update lod.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.updateVertexBuffer">
            <summary>
            need to update vertex buffer
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.worldTransforms">
            <summary>
            The world transforms.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.lastAnimTime">
            <summary>
            The last animation time
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.SkinnedModelRenderer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.Graphics3D.SkinnedModelRenderer"/> class.
            </summary>
            <param name="name">
            Name of this instance.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.Draw(System.TimeSpan)">
            <summary>
            Draws the animated model.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The entity passes a frustrum culling test.</description>
            </item>
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable"/> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.TryGetBoneWorldTransform(System.String,WaveEngine.Common.Math.Matrix@)">
            <summary>
            Tries to get the world transform of a given bone.
            </summary>
            <param name="boneName">
            Name of the bone.
            </param>
            <param name="transform">
            The transform of the bone.
            </param>
            <returns>
            <c>true</c> if it was possible to get the world transform, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.DeleteDependencies">
            <summary>
            Deletes the dependencies after .
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.DrawDebugLines">
            <summary>
            The draw debug lines.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.UpdateTransforms">
            <summary>
            Updates the transforms.
            </summary>
            <exception cref="T:System.ObjectDisposedException">SkinnedModelRenderer has been diposed</exception>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.LowPerformance">
            <summary>
            Gets or sets a value indicating whether there game is performing slowly and has to drop updates when skinning.
            </summary>
            <value>
            <c>true</c> if the game is performing slowly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.Alpha">
            <summary>
            Gets or sets the alpha value used when rendering the model.
            </summary>
            <value>
            The alpha value.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.DiffuseColor">
            <summary>
            Gets or sets the diffuse color used when rendering the model.
            </summary>
            <value>
            The diffuse color.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.LODEnabled">
            <summary>
            Gets or sets a value indicating whether LOD is enabled.
            </summary>
            <value>
              <c>true</c> if LOD is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.LODMaxDistance">
            <summary>
            Gets or sets the LOD maximum distance.
            </summary>
            <value>
            The LOD maximum distance.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.LODMinDistance">
            <summary>
            Gets or sets the LOD minimum distance.
            </summary>
            <value>
            The LOD minimum distance.
            </value>
        </member>
        <member name="P:WaveEngine.Components.Graphics3D.SkinnedModelRenderer.LineColor">
            <summary>
            Gets or sets the color of the line used when rendering with debug lines activated.
            </summary>
            <value>
            The color of the line.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.TextControlRenderer">
            <summary>
            The text block renderer component.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControlRenderer.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControlRenderer.Transform2D">
            <summary>
            The transform2 D
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControlRenderer.TextBlock">
            <summary>
            The text block
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControlRenderer.position">
            <summary>
            The position
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControlRenderer.scale">
            <summary>
            The scale
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextControlRenderer.origin">
            <summary>
            The origin
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControlRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextControlRenderer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControlRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextControlRenderer"/> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControlRenderer.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextControlRenderer"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControlRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable"/> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControlRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextControlRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines /&gt;
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="T:WaveEngine.Components.UI.TextBoxBehavior">
            <summary>
            TextBox Behavior
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.Transform">
            <summary>
            The panel
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.Panel">
            <summary>
            The panel
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.Gestures">
            <summary>
            The gestures
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.textControl">
            <summary>
            The text control
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.imageControl">
            <summary>
            The image control
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.cursorTransform">
            <summary>
            The cursor control
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.cursorAnimation">
            <summary>
            The cursor animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.flicker">
            <summary>
            The flicker animation
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.inputService">
            <summary>
            The input service
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.beforeKeyboardState">
            <summary>
            The before keyboard state
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.uppercase">
            <summary>
            The uppercase actived
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.altcase">
            <summary>
            The alt-case actived
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.acceptsReturn">
            <summary>
            The accepts return
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.isReadOnly">
            <summary>
            The is read only
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.textBeforeCursor">
            <summary>
            Two part of text
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.TextBoxBehavior.textAfterCursor">
            <summary>
            Two part of text
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.TextBoxBehavior"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.Gestures_TouchPressed(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchPressed event of the Gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component"/>, or the <see cref="T:WaveEngine.Framework.Entity"/>
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.AppendCharacter(System.Char)">
            <summary>
            Appends the text.
            </summary>
            <param name="c">The c.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.AppendReturn">
            <summary>
            Appends the return.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.RemoveBackCharacter">
            <summary>
            Removes the character.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.TextBoxBehavior.RemoveFrontCharacter">
            <summary>
            Removes the front character.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBoxBehavior.AcceptsReturn">
            <summary>
            Gets or sets a value indicating whether [accepts return].
            </summary>
            <value>
              <c>true</c> if [accepts return]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBoxBehavior.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this instance is read only.
            </summary>
            <value>
            <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.TextBoxBehavior.UpdateText">
            <summary>
            Sets the update text.
            </summary>
            <value>
            The update text.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.ToggleSwitch">
            <summary>
            ToggleSwitch decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitch.DefaultWidth">
            <summary>
            The default width
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitch.DefaultHeight">
            <summary>
            The default height
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitch.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitch.DefaultTextMargin">
            <summary>
            The default text margin
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitch.DefaultSliderMargin">
            <summary>
            The default slider margin
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ToggleSwitch"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitch.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ToggleSwitch"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitch.ToggleSwitch_Toggled(System.Object,System.EventArgs)">
            <summary>
            Handles the Toggled event of the ToggleSwitch control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:WaveEngine.Components.UI.ToggleSwitch.Toggled">
            <summary>
            Occurs when [toggled].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.OnText">
            <summary>
            Gets or sets the on text.
            </summary>
            <value>
            The on text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.OffText">
            <summary>
            Gets or sets the off text.
            </summary>
            <value>
            The off text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.IsOn">
            <summary>
            Gets or sets a value indicating whether this instance is on.
            </summary>
            <value>
              <c>true</c> if this instance is on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.Foreground">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.Background">
            <summary>
            Gets or sets the background.
            </summary>
            <value>
            The background.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.FontPath">
            <summary>
            Sets the font.
            </summary>
            <value>
            The font.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitch.TextColor">
            <summary>
            Gets or sets the foreground.
            </summary>
            <value>
            The foreground.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.ToggleSwitchBehavior">
            <summary>
            The ToggleSwitch Behavior
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.DefaultOffset">
            <summary>
            The default width
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.Gestures">
            <summary>
            The gestures
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.foregroundTransform">
            <summary>
            The foreground transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.bulletTransform">
            <summary>
            The bullet transform
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.textControl">
            <summary>
            The text control
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.bulletAnimation">
            <summary>
            The animations
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.foregroundAnimation">
            <summary>
            The animations
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.animOn">
            <summary>
            The animOn and animOff animations
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.animOff">
            <summary>
            The animOn and animOff animations
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.on">
            <summary>
            The on
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.onText">
            <summary>
            The on text
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.ToggleSwitchBehavior.offText">
            <summary>
            The off text
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitchBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.ToggleSwitchBehavior"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitchBehavior.Initialize">
            <summary>
            Performs further custom initialization for this instance.
            </summary>
            <remarks>
            By default this method does nothing.
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitchBehavior.ResolveDependencies">
            <summary>
            Resolves the dependencies needed for this instance to work.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitchBehavior.Gestures_TouchReleased(System.Object,WaveEngine.Components.Gestures.GestureEventArgs)">
            <summary>
            Handles the TouchReleased event of the Gestures control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:WaveEngine.Components.Gestures.GestureEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.ToggleSwitchBehavior.Update(System.TimeSpan)">
            <summary>
            Allows this instance to execute custom logic during its <c>Update</c>.
            </summary>
            <param name="gameTime">The game time.</param>
            <remarks>
            This method will not be executed if the <see cref="T:WaveEngine.Framework.Component"/>, or the <see cref="T:WaveEngine.Framework.Entity"/>
            owning it are not <c>Active</c>.
            </remarks>
        </member>
        <member name="E:WaveEngine.Components.UI.ToggleSwitchBehavior.Toggled">
            <summary>
            Occurs when [toggled].
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitchBehavior.IsOn">
            <summary>
            Gets or sets a value indicating whether this instance is on.
            </summary>
            <value>
              <c>true</c> if this instance is on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitchBehavior.OnText">
            <summary>
            Gets or sets the on text.
            </summary>
            <value>
            The on text.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.ToggleSwitchBehavior.OffText">
            <summary>
            Gets or sets the off text.
            </summary>
            <value>
            The off text.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.WrapPanel">
            <summary>
            WrapPanel decorate class
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.WrapPanel.instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.WrapPanel"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.WrapPanel"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanel.Add(WaveEngine.Components.UI.UIBase)">
            <summary>
            Adds the specified UI.
            </summary>
            <param name="ui">The UI.</param>
            <exception cref="T:System.ArgumentNullException">UI component is null.</exception>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanel.Remove(WaveEngine.Components.UI.UIBase)">
            <summary>
            Removes the specified UI.
            </summary>
            <param name="ui">The UI.</param>
            <exception cref="T:System.ArgumentNullException">UI component is null.</exception>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanel.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>
            The orientation.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanel.Margin">
            <summary>
            Gets or sets the margin.
            </summary>
            <value>
            The margin.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanel.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanel.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanel.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>
            The horizontal alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanel.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value>
            The vertical alignment.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanel.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>
            The color of the background.
            </value>
            <exception cref="T:System.Exception">This panel haven't background assigned</exception>
        </member>
        <member name="T:WaveEngine.Components.UI.WrapPanelControl">
            <summary>
            The wrap panel.
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.WrapPanelControl.instances">
            <summary>
            Total number of instances.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.WrapPanelControl"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelControl.Measure(WaveEngine.Common.Math.Vector2)">
            <summary>
            The measure.
            </summary>
            <param name="availableSize">
            The available size.
            </param>
            <returns>
            The <see cref="T:WaveEngine.Common.Math.Vector2"/>.
            </returns>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelControl.Arrange(WaveEngine.Common.Math.RectangleF)">
            <summary>
            Arranges the specified final size.
            </summary>
            <param name="finalSize">The final size.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelControl.Dispose(System.Boolean)">
            <summary>
            The dispose.
            </summary>
            <param name="disposing">
            The disposing.
            </param>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanelControl.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanelControl.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:WaveEngine.Components.UI.WrapPanelControl.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="T:WaveEngine.Components.UI.WrapPanelRenderer">
            <summary>
            The WrapPanel Renderer
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.WrapPanelRenderer.instances">
            <summary>
            Total number of instances
            </summary>
        </member>
        <member name="F:WaveEngine.Components.UI.WrapPanelRenderer.Transform2D">
            <summary>
            The transform2D
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.WrapPanelRenderer"/> class.
            </summary>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelRenderer.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.WrapPanelRenderer"/> class.
            </summary>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelRenderer.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:WaveEngine.Components.UI.WrapPanelRenderer"/> class.
            </summary>
            <param name="name">Name of this instance.</param>
            <param name="layerType">Type of the layer.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelRenderer.Draw(System.TimeSpan)">
            <summary>
            Allows to perform custom drawing.
            </summary>
            <param name="gameTime">The elapsed game time.</param>
            <remarks>
            This method will only be called if all the following points are true:
            <list type="bullet">
            <item>
            <description>The entity passes the culling test.</description>
            </item>
            <item>
            <description>The parent of the owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> cascades its visibility to its children and it is visible.</description>
            </item>
            <item>
            <description>The <see cref="T:WaveEngine.Framework.Drawable"/> is active.</description>
            </item>
            <item>
            <description>The owner <see cref="T:WaveEngine.Framework.Entity"/> of the <see cref="T:WaveEngine.Framework.Drawable"/> is active and visible.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelRenderer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:WaveEngine.Components.UI.WrapPanelRenderer.DrawDebugLines">
            <summary>
            Helper method that draws debug lines.
            </summary>
            <remarks>
            This method will only work on debug mode and if RenderManager.DebugLines /&gt;
            is set to <c>true</c>.
            </remarks>
        </member>
    </members>
</doc>
